<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JumpBean&#39;s Blog</title>
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jumpbeandev.com/"/>
  <updated>2017-06-26T06:29:14.000Z</updated>
  <id>http://www.jumpbeandev.com/</id>
  
  <author>
    <name>Jump Bean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(5):Kafka</title>
    <link href="http://www.jumpbeandev.com/2017/06/26/hadoop5/"/>
    <id>http://www.jumpbeandev.com/2017/06/26/hadoop5/</id>
    <published>2017-06-26T05:02:37.000Z</published>
    <updated>2017-06-26T06:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍Kafka集群安装。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-服务器信息及节点分配"><a href="#1-服务器信息及节点分配" class="headerlink" title="1. 服务器信息及节点分配"></a>1. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="2-安装Kafka"><a href="#2-安装Kafka" class="headerlink" title="2. 安装Kafka"></a>2. 安装Kafka</h2><h3 id="2-1-下载安装包"><a href="#2-1-下载安装包" class="headerlink" title="2.1 下载安装包"></a>2.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/kafka/0.10.2.1/kafka_2.12-0.10.2.1.tgz </div></pre></td></tr></table></figure>
<h3 id="2-2-创建模板配置文件"><a href="#2-2-创建模板配置文件" class="headerlink" title="2.2 创建模板配置文件"></a>2.2 创建模板配置文件</h3><p>需要修改的配置文件为server.properties。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">############################# Server Basics #############################</div><div class="line"></div><div class="line"># The id of the broker. This must be set to a unique integer for each broker.</div><div class="line">broker.id=1</div><div class="line"></div><div class="line"># Switch to enable topic deletion or not, default value is false</div><div class="line">#delete.topic.enable=true</div><div class="line"></div><div class="line">############################# Socket Server Settings #############################</div><div class="line"></div><div class="line"># The address the socket server listens on. It will get the value returned from</div><div class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</div><div class="line">#   FORMAT:</div><div class="line">#     listeners = listener_name://host_name:port</div><div class="line">#   EXAMPLE:</div><div class="line">#     listeners = PLAINTEXT://your.host.name:9092</div><div class="line">listeners=PLAINTEXT://node01:9092</div><div class="line"></div><div class="line"># Hostname and port the broker will advertise to producers and consumers. If not set,</div><div class="line"># it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value</div><div class="line"># returned from java.net.InetAddress.getCanonicalHostName().</div><div class="line">#advertised.listeners=PLAINTEXT://node01:9092</div><div class="line"></div><div class="line"># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details</div><div class="line">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</div><div class="line"></div><div class="line"># The number of threads handling network requests</div><div class="line">num.network.threads=3</div><div class="line"></div><div class="line"># The number of threads doing disk I/O</div><div class="line">num.io.threads=8</div><div class="line"></div><div class="line"># The send buffer (SO_SNDBUF) used by the socket server</div><div class="line">socket.send.buffer.bytes=102400</div><div class="line"></div><div class="line"># The receive buffer (SO_RCVBUF) used by the socket server</div><div class="line">socket.receive.buffer.bytes=102400</div><div class="line"></div><div class="line"># The maximum size of a request that the socket server will accept (protection against OOM)</div><div class="line">socket.request.max.bytes=104857600</div><div class="line"></div><div class="line"></div><div class="line">############################# Log Basics #############################</div><div class="line"></div><div class="line"># A comma seperated list of directories under which to store log files</div><div class="line">log.dirs=/tmp/kafka-logs</div><div class="line"></div><div class="line"># The default number of log partitions per topic. More partitions allow greater</div><div class="line"># parallelism for consumption, but this will also result in more files across</div><div class="line"># the brokers.</div><div class="line">num.partitions=1</div><div class="line"></div><div class="line"># The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.</div><div class="line"># This value is recommended to be increased for installations with data dirs located in RAID array.</div><div class="line">num.recovery.threads.per.data.dir=1</div><div class="line"></div><div class="line">############################# Log Flush Policy #############################</div><div class="line"></div><div class="line"># Messages are immediately written to the filesystem but by default we only fsync() to sync</div><div class="line"># the OS cache lazily. The following configurations control the flush of data to disk.</div><div class="line"># There are a few important trade-offs here:</div><div class="line">#    1. Durability: Unflushed data may be lost if you are not using replication.</div><div class="line">#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.</div><div class="line">#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.</div><div class="line"># The settings below allow one to configure the flush policy to flush data after a period of time or</div><div class="line"># every N messages (or both). This can be done globally and overridden on a per-topic basis.</div><div class="line"></div><div class="line"># The number of messages to accept before forcing a flush of data to disk</div><div class="line">#log.flush.interval.messages=10000</div><div class="line"></div><div class="line"># The maximum amount of time a message can sit in a log before we force a flush</div><div class="line">#log.flush.interval.ms=1000</div><div class="line"></div><div class="line">############################# Log Retention Policy #############################</div><div class="line"></div><div class="line"># The following configurations control the disposal of log segments. The policy can</div><div class="line"># be set to delete segments after a period of time, or after a given size has accumulated.</div><div class="line"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</div><div class="line"># from the end of the log.</div><div class="line"></div><div class="line"># The minimum age of a log file to be eligible for deletion due to age</div><div class="line">log.retention.hours=168</div><div class="line"></div><div class="line"># A size-based retention policy for logs. Segments are pruned from the log as long as the remaining</div><div class="line"># segments don&apos;t drop below log.retention.bytes. Functions independently of log.retention.hours.</div><div class="line">#log.retention.bytes=1073741824</div><div class="line"></div><div class="line"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</div><div class="line">log.segment.bytes=1073741824</div><div class="line"></div><div class="line"># The interval at which log segments are checked to see if they can be deleted according</div><div class="line"># to the retention policies</div><div class="line">log.retention.check.interval.ms=300000</div><div class="line"></div><div class="line">############################# Zookeeper #############################</div><div class="line"></div><div class="line"># Zookeeper connection string (see zookeeper docs for details).</div><div class="line"># This is a comma separated host:port pairs, each corresponding to a zk</div><div class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</div><div class="line"># You can also append an optional chroot string to the urls to specify the</div><div class="line"># root directory for all kafka znodes.</div><div class="line">zookeeper.connect=node01:2181,node02:2181,node03:2181,node04:2181,node05:2181</div><div class="line"></div><div class="line"># Timeout in ms for connecting to zookeeper</div><div class="line">zookeeper.connection.timeout.ms=6000</div></pre></td></tr></table></figure><br>其中：</p>
<ul>
<li>broker.id：broker的id，必需是一个全局(集群)唯一的整数值，即集群中每个kafka server的配置不能相同。此处按node01-1/node02-2/node03-3/node04-4/node05-5来配置。</li>
<li>listeners：socket监听的地址，格式为listeners = security_protocol://host_name:port，端口默认为9092。</li>
<li>log.dirs：日志保存目录</li>
<li>zookeeper.connect：zookeeper连接地址</li>
</ul>
<h3 id="2-3-安装部署"><a href="#2-3-安装部署" class="headerlink" title="2.3 安装部署"></a>2.3 安装部署</h3><p>写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>kafka.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"></div><div class="line">tar -xvf ./kafka_2.12-0.10.2.1.tgz</div><div class="line">mv ./kafka_2.12-0.10.2.1 /usr/kafka</div><div class="line"></div><div class="line">cp -rf ./server.properties /usr/kafka/config/server.properties</div><div class="line"></div><div class="line">echo &quot;export KAFKA_HOME=/usr/kafka&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$KAFKA_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保kafka_2.12-0.10.2.1.tgz，server.properties，kafka.sh在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./kafka.sh</div><div class="line">./kafka.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="2-4-部署所有节点"><a href="#2-4-部署所有节点" class="headerlink" title="2.4 部署所有节点"></a>2.4 部署所有节点</h3><p>使用sftp将kafka_2.12-0.10.2.1.tgz，server.properties，kafka.sh传到其他所有节点上并按照以上步骤进行部署，注意根据具体节点修改server.properties中的broker.id和listeners。</p>
<hr>
<h2 id="3-Kafka使用"><a href="#3-Kafka使用" class="headerlink" title="3. Kafka使用"></a>3. Kafka使用</h2><h3 id="3-1-启动Kafka集群"><a href="#3-1-启动Kafka集群" class="headerlink" title="3.1 启动Kafka集群"></a>3.1 启动Kafka集群</h3><p>在所有节点上执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-server-start.sh -daemon /usr/kafka/config/server.properties</div></pre></td></tr></table></figure></p>
<h3 id="3-2-创建Topic"><a href="#3-2-创建Topic" class="headerlink" title="3.2 创建Topic"></a>3.2 创建Topic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh --zookeeper node01:2181 --create --replication-factor 1 --partitions 1 --topic test</div></pre></td></tr></table></figure>
<h3 id="3-3-查看Topic"><a href="#3-3-查看Topic" class="headerlink" title="3.3 查看Topic"></a>3.3 查看Topic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh --zookeeper node01:2181 --list</div></pre></td></tr></table></figure>
<h3 id="3-4-创建Producer"><a href="#3-4-创建Producer" class="headerlink" title="3.4 创建Producer"></a>3.4 创建Producer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-console-producer.sh --broker-list node01:9092 --topic test</div></pre></td></tr></table></figure>
<h3 id="3-5-创建Consumer"><a href="#3-5-创建Consumer" class="headerlink" title="3.5 创建Consumer"></a>3.5 创建Consumer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-console-consumer.sh --bootstrap-server node01:9092 --topic test --from-beginning</div></pre></td></tr></table></figure>
<h3 id="3-6-删除Topic"><a href="#3-6-删除Topic" class="headerlink" title="3.6 删除Topic"></a>3.6 删除Topic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh --zookeeper node01:2181 --delete --topic test</div></pre></td></tr></table></figure>
<hr>
<p>参照资料：<br><a href="http://www.cnblogs.com/liugh/p/6691589.html" target="_blank" rel="external">Kafka0.10.2.0分布式集群安装</a><br><a href="http://blog.csdn.net/gongxinju/article/details/53415051" target="_blank" rel="external">Kafka学习总结(五)——Kafka集群搭建</a><br><a href="http://www.cnblogs.com/luotianshuai/p/5206662.html" target="_blank" rel="external">Kafka【第一篇】Kafka集群搭建</a><br><a href="http://blog.csdn.net/zuoanyinxiang/article/details/50902425" target="_blank" rel="external">Kafka学习(三)：Kafka的内部机制深入(持久化，分布式，通讯协议)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍Kafka集群安装。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(4):Spark</title>
    <link href="http://www.jumpbeandev.com/2017/06/23/hadoop4/"/>
    <id>http://www.jumpbeandev.com/2017/06/23/hadoop4/</id>
    <published>2017-06-23T01:59:41.000Z</published>
    <updated>2017-06-26T06:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍Spark集群安装。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-服务器信息及节点分配"><a href="#1-服务器信息及节点分配" class="headerlink" title="1. 服务器信息及节点分配"></a>1. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="2-安装Scala"><a href="#2-安装Scala" class="headerlink" title="2. 安装Scala"></a>2. 安装Scala</h2><h3 id="2-1-下载安装包"><a href="#2-1-下载安装包" class="headerlink" title="2.1 下载安装包"></a>2.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://downloads.lightbend.com/scala/2.12.2/scala-2.12.2.tgz</div></pre></td></tr></table></figure>
<h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><p>写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>scala.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"></div><div class="line">tar -xvf ./scala-2.12.2.tgz</div><div class="line">mv ./scala-2.12.2 /usr/scala</div><div class="line"></div><div class="line">echo &quot;export SCALA_HOME=/usr/scala&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$SCALA_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保scala-2.12.2.tgz，scala.sh在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./scala.sh</div><div class="line">./scala.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="2-3-安装所有节点"><a href="#2-3-安装所有节点" class="headerlink" title="2.3 安装所有节点"></a>2.3 安装所有节点</h3><p>使用sftp将scala-2.12.2.tgz，scala.sh传到其他所有节点上并按照以上步骤进行部署。</p>
<hr>
<h2 id="3-安装Spark"><a href="#3-安装Spark" class="headerlink" title="3. 安装Spark"></a>3. 安装Spark</h2><h3 id="3-1-下载安装包"><a href="#3-1-下载安装包" class="headerlink" title="3.1 下载安装包"></a>3.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.7.tgz</div></pre></td></tr></table></figure>
<h3 id="3-2-创建模板配置文件"><a href="#3-2-创建模板配置文件" class="headerlink" title="3.2 创建模板配置文件"></a>3.2 创建模板配置文件</h3><p>需要修改的配置文件为spark-env.sh，slaves。</p>
<h4 id="3-2-1-spark-env-sh"><a href="#3-2-1-spark-env-sh" class="headerlink" title="3.2.1 spark-env.sh"></a>3.2.1 spark-env.sh</h4><p>添加以下环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre</div><div class="line">export SCALA_HOME=/usr/scala</div><div class="line">export HADOOP_HOME=/usr/hadoop</div><div class="line">export HADOOP_CONF_DIR=/usr/hadoop/etc/hadoop</div><div class="line">export SPARK_DAEMON_Java_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node01:2181,node02:2181,node03:2181,node04:2181,node05:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</div><div class="line">export SPARK_EXECUTOR_MEMORY=1G</div><div class="line">export SPARK_WORKER_CORES=1</div><div class="line">export SPARK_WORKER_INSTANCES=1</div><div class="line">export SPARK_WORKER_MEMORY=1G</div><div class="line">export SPARK_HOME=/usr/spark</div></pre></td></tr></table></figure></p>
<h4 id="3-2-1-slaves"><a href="#3-2-1-slaves" class="headerlink" title="3.2.1 slaves"></a>3.2.1 slaves</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">node01</div><div class="line">node02</div><div class="line">node03</div><div class="line">node04</div><div class="line">node05</div></pre></td></tr></table></figure>
<h3 id="3-3-安装部署"><a href="#3-3-安装部署" class="headerlink" title="3.3 安装部署"></a>3.3 安装部署</h3><p>写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>spark.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"></div><div class="line">tar -xvf spark-2.1.1-bin-hadoop2.7.tgz</div><div class="line">mv ./spark-2.1.1-bin-hadoop2.7 /usr/spark</div><div class="line"></div><div class="line">cp -rf ./spark-env.sh /usr/spark/conf/spark-env.sh</div><div class="line">cp -rf ./slaves /usr/spark/conf/slaves</div><div class="line"></div><div class="line">echo &quot;export SPARK_HOME=/usr/spark&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$SPARK_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保spark-env.sh，slaves，spark-2.1.1-bin-hadoop2.7.tgz，spark.sh在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./spark.sh</div><div class="line">./spark.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="3-4-部署所有节点"><a href="#3-4-部署所有节点" class="headerlink" title="3.4 部署所有节点"></a>3.4 部署所有节点</h3><p>使用sftp将spark-env.sh，slaves，spark-2.1.1-bin-hadoop2.7.tgz，spark.sh传到其他所有节点上并按照以上步骤进行部署。</p>
<hr>
<h2 id="4-Spark启动"><a href="#4-Spark启动" class="headerlink" title="4. Spark启动"></a>4. Spark启动</h2><p>node02作为备用master，基于zookeeper来自动选举active机器。</p>
<h3 id="4-1-在node01执行以下命令"><a href="#4-1-在node01执行以下命令" class="headerlink" title="4.1 在node01执行以下命令"></a>4.1 在node01执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/spark/sbin/start-all.sh</div></pre></td></tr></table></figure>
<h3 id="4-2-在node02执行以下命令"><a href="#4-2-在node02执行以下命令" class="headerlink" title="4.2 在node02执行以下命令"></a>4.2 在node02执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/spark/sbin/start-master.sh</div></pre></td></tr></table></figure>
<hr>
<h2 id="5-测试验证"><a href="#5-测试验证" class="headerlink" title="5. 测试验证"></a>5. 测试验证</h2><h3 id="5-1-通过浏览器查看Spark信息"><a href="#5-1-通过浏览器查看Spark信息" class="headerlink" title="5.1 通过浏览器查看Spark信息"></a>5.1 通过浏览器查看Spark信息</h3><p>打开<a href="http://192.168.205.50:8080/：" target="_blank" rel="external">http://192.168.205.50:8080/：</a><br><img src="/images/2017/06/23/1322.png"></p>
<h3 id="5-2-通过jps查看进程"><a href="#5-2-通过jps查看进程" class="headerlink" title="5.2 通过jps查看进程"></a>5.2 通过jps查看进程</h3><p><img src="/images/2017/06/23/1323.png"></p>
<h3 id="5-3-运行Spark提供的计算圆周率的示例程序"><a href="#5-3-运行Spark提供的计算圆周率的示例程序" class="headerlink" title="5.3 运行Spark提供的计算圆周率的示例程序"></a>5.3 运行Spark提供的计算圆周率的示例程序</h3><p>进入node01的/usr/spark目录，基于local master运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@node01 spark]# ./bin/spark-submit --class  org.apache.spark.examples.SparkPi  --master local  ./examples/jars/spark-examples_2.11-2.1.1.jar</div></pre></td></tr></table></figure><br><img src="/images/2017/06/23/1416.png"><br>基于spark on yarn运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@node01 spark]# ./bin/spark-submit --class  org.apache.spark.examples.SparkPi  --master yarn --deploy-mode cluster  ./examples/jars/spark-examples_2.11-2.1.1.jar</div></pre></td></tr></table></figure><br><img src="/images/2017/06/23/1419.png"></p>
<hr>
<p>参照资料：<br><a href="http://www.cnblogs.com/liugh/p/6624923.html" target="_blank" rel="external">Spark2.1.0分布式集群安装</a><br><a href="http://blog.csdn.net/pucao_cug/article/details/72353701" target="_blank" rel="external">Linux安装Spark集群(CentOS7+Spark2.1.1+Hadoop2.8.0)</a><br><a href="http://blog.csdn.net/pucao_cug/article/details/72453382" target="_blank" rel="external">Spark2.1.1中用各种模式运行计算圆周率的官方Demo</a><br><a href="http://www.cnblogs.com/zengxiaoliang/p/6478859.html" target="_blank" rel="external">Hadoop2.7.3+Spark2.1.0完全分布式集群搭建过程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍Spark集群安装。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(3):Hbase</title>
    <link href="http://www.jumpbeandev.com/2017/06/21/hadoop3/"/>
    <id>http://www.jumpbeandev.com/2017/06/21/hadoop3/</id>
    <published>2017-06-21T02:45:57.000Z</published>
    <updated>2017-06-26T06:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍Hbase集群安装。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-服务器信息及节点分配"><a href="#1-服务器信息及节点分配" class="headerlink" title="1. 服务器信息及节点分配"></a>1. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="2-安装Hbase"><a href="#2-安装Hbase" class="headerlink" title="2. 安装Hbase"></a>2. 安装Hbase</h2><h3 id="2-1-下载安装包"><a href="#2-1-下载安装包" class="headerlink" title="2.1 下载安装包"></a>2.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/hbase/1.2.6/hbase-1.2.6-bin.tar.gz</div></pre></td></tr></table></figure>
<h3 id="2-2-创建模板配置文件"><a href="#2-2-创建模板配置文件" class="headerlink" title="2.2 创建模板配置文件"></a>2.2 创建模板配置文件</h3><p>需要修改的配置文件为hbase-env.sh，hbase-site.xml，regionservers。</p>
<h4 id="2-2-1-hbase-site-xml"><a href="#2-2-1-hbase-site-xml" class="headerlink" title="2.2.1 hbase-site.xml"></a>2.2.1 hbase-site.xml</h4><p>采用双HMaster配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://ctns/hbase&lt;/value&gt;&lt;!--这里必须跟core-site.xml中的fs.defaultFS键配置一样--&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 开启分布式模式 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</div><div class="line">        &lt;value&gt;true&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--只配置端口，为了配置多个HMaster --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.master&lt;/name&gt;</div><div class="line">        &lt;value&gt;60000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;/usr/hbase/tmp&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--这里设置hbase API客户端侧缓存值，大于此值就进行一次提交，/opt/hbase-1.2.1/conf/hbase-site.xml统一配置为5M，对所有HTable都生效，那么客户端API就可不设置--&gt;</div><div class="line">    &lt;!--htable.setWriteBufferSize(5242880);//5M --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.client.write.buffer&lt;/name&gt;</div><div class="line">        &lt;value&gt;5242880&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--这里设置Master并发最大线程数，经常有人设为300左右--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.regionserver.handler.count&lt;/name&gt;</div><div class="line">        &lt;value&gt;20&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    默认值    ：256M</div><div class="line">    说明        ：在当前ReigonServer上单个Reigon的最大存储空间，单个Region超过该值时，这个Region会被自动split成更小的region。</div><div class="line">    数据表创建时会预分区，每个预分区最大大小这里设置为10G，防止频繁的split阻塞数据读写，</div><div class="line">    只有当预分区超过10G时才会进行split，正式环境应该首先预测数据存储时间内的大致数据量，</div><div class="line">    然后如果每个预分区为10G，计算出分区数，建表时指定分区设置，防止后期频繁split</div><div class="line">    写法，如果你想设为128兆，但绝不可以写成128M这样，最安全的写法是128*1024*1024的数值，如下</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.hregion.max.filesize&lt;/name&gt;</div><div class="line">        &lt;value&gt;134217728&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    hbase本质上可以说是HADOOP HDFS的客户端，虽然Hadoop的core-site.xml里设置了文件副本数，但是仍然是客户端传值优先，这里设置为2，</div><div class="line">    意思是一个文件，最终在Hadoop上总个数为2，正式环境最好设置为3，目前发现此值小于3时，</div><div class="line">    在遇到All datanodes xxx.xxx.xxx.xxx:port are bad. Aborting...错误信息时，如果某个DataNode宕机，原则上hbase调用的DFSClient会去其他Datanode</div><div class="line">    上重试写，但发现配置的值低于3就不会去尝试</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;2&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    IncreasingToUpperBoundRegionSplitPolicy策略的意思是，数据表如果预分区为2，配置的memstore flush size=128M，那么下一次分裂大小是2的平方然后乘以128MB，即2*2*128M=512MB;</div><div class="line">    ConstantSizeRegionSplitPolicy策略的意思是按照上面指定的region大小超过30G才做分裂</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.regionserver.region.split.policy&lt;/name&gt;</div><div class="line">        &lt;value&gt;org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--一个edit版本在内存中的cache时长，默认3600000毫秒--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.regionserver.optionalcacheflushinterval&lt;/name&gt;</div><div class="line">        &lt;value&gt;7200000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--分配给HFile/StoreFile的block cache占最大堆(-Xmx setting)的比例。默认0.3意思是分配30%，设置为0就是禁用，但不推荐。--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hfile.block.cache.size&lt;/name&gt;</div><div class="line">        &lt;value&gt;0.3&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--当memstore的大小超过这个值的时候，会flush到磁盘。这个值被一个线程每隔hbase.server.thread.wakefrequency检查一下。--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.hregion.memstore.flush.size&lt;/name&gt;</div><div class="line">        &lt;value&gt;52428800&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    默认值    ：0.4/0.35</div><div class="line">    说明        ：hbase.hregion.memstore.flush.size 这个参数的作用是当单个Region内所有的memstore大小总和超过指定值时，flush该region的所有memstore</div><div class="line">    单个region server的全部memtores的最大值。超过这个值，一个新的update操作会被挂起，强制执行flush操作。</div><div class="line">    以前版本中是通过hbase.regionserver.global.memstore.upperLimit设置，老版本中含义是在hbase-env.sh中配置的HEAP_SIZE比如4G，</div><div class="line">    那么以该值4G乘以配置的0.5就是2G，意思是所有memstore总和达到2G值时，阻塞所有读写，现在1.2.1版本hbase中被hbase.regionserver.global.memstore.size替代，</div><div class="line">    计算方法仍然是HEAP_SIZE乘以配置的百分比比如下面的0.5，那么阻塞读写的阀值就为2G</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.regionserver.global.memstore.size&lt;/name&gt;</div><div class="line">        &lt;value&gt;0.5&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    当强制执行flush操作的时候，当低于这个值的时候，flush会停止。</div><div class="line">    默认是堆大小的 35% . 如果这个值和 hbase.regionserver.global.memstore.upperLimit 相同就意味着当update操作因为内存限制被挂起时，</div><div class="line">    会尽量少的执行flush(译者注:一旦执行flush，值就会比下限要低，不再执行)。</div><div class="line">    在老版本中该值是通过hbase.regionserver.global.memstore.size.lower.limit设置，</div><div class="line">    计算方法是以hbase-env.sh的HEAP_SIZE乘以配置的百分比比如0.3就是HEAP_SIZE4G乘以0.3=1.2G，达到这个值的话就在所有memstore中选择最大的那个做flush动作，</div><div class="line">    新版本则完全不同了，首先是通过hbase.regionserver.global.memstore.lowerLimit设置，而且不是以HEAP_SIZE作为参考，</div><div class="line">    二是以配置的hbase.regionserver.global.memstore.size的值再乘以配置的比例比如0.5，如果HEAP_SIZE=4G，</div><div class="line">    hbase.regionserver.global.memstore.size配置为0.5，hbase.regionserver.global.memstore.size.lower.limit配置的为0.5，</div><div class="line">    则计算出来的值为4G乘以0.5再乘以0.5就是1G了，达到1G就先找最大的memstore触发flush</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.regionserver.global.memstore.size.lower.limit&lt;/name&gt;</div><div class="line">        &lt;value&gt;0.5&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--这里设置HDFS客户端最大超时时间，尽量改大，后期hbase经常会因为该问题频繁宕机--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.client.socket-timeout&lt;/name&gt;</div><div class="line">        &lt;value&gt;600000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    hbase.table.sanity.checks是一个开关，主要用于hbase各种参数检查，当为true时候，检查步骤如下</div><div class="line">    1.check max file size，hbase.hregion.max.filesize，最小为2MB</div><div class="line">    2.check flush size，hbase.hregion.memstore.flush.size，最小为1MB</div><div class="line">    3.check that coprocessors and other specified plugin classes can be loaded</div><div class="line">    4.check compression can be loaded</div><div class="line">    5.check encryption can be loaded</div><div class="line">    6.Verify compaction policy</div><div class="line">    7.check that we have at least 1 CF</div><div class="line">    8.check blockSize</div><div class="line">    9.check versions</div><div class="line">    10.check minVersions &lt;= maxVerions</div><div class="line">    11.check replication scope</div><div class="line">    12.check data replication factor, it can be 0(default value) when user has not explicitly set the value, in this case we use default replication factor set in the file system.</div><div class="line">    详细情况可以去查看源代码org.apache.hadoop.hbase.master.HMaster的方法sanityCheckTableDescriptor，</div><div class="line">    该代码位于hbase源码的模块hbase-server下</div><div class="line">    --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.table.sanity.checks&lt;/name&gt;</div><div class="line">        &lt;value&gt;false&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--ZooKeeper 会话超时.HBase把这个值传递改zk集群，向他推荐一个会话的最大超时时间--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">    &lt;!--every 30s,the master will check regionser is working --&gt;</div><div class="line">        &lt;name&gt;zookeeper.session.timeout&lt;/name&gt;</div><div class="line">        &lt;value&gt;30000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--</div><div class="line">    Hbase的外置zk集群时，使用下面的zk端口。因为我这5台机子打算都安装hbase，所以都指定zookeeper。</div><div class="line">     --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</div><div class="line">        &lt;value&gt;node01:2181,node02:2181,node03:2181,node04:2181,node05:2181&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</div><div class="line">        &lt;value&gt;/usr/zookeeper/data&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-2-2-hbase-env-sh"><a href="#2-2-2-hbase-env-sh" class="headerlink" title="2.2.2 hbase-env.sh"></a>2.2.2 hbase-env.sh</h4><p>添加如下变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre</div><div class="line">export HBASE_CLASSPATH=/usr/hadoop/etc/hadoop</div><div class="line">export HBASE_MANAGES_ZK=false</div></pre></td></tr></table></figure></p>
<h4 id="2-2-3-regionservers"><a href="#2-2-3-regionservers" class="headerlink" title="2.2.3 regionservers"></a>2.2.3 regionservers</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node03</div><div class="line">node04</div><div class="line">node05</div></pre></td></tr></table></figure>
<h3 id="2-3-安装部署"><a href="#2-3-安装部署" class="headerlink" title="2.3 安装部署"></a>2.3 安装部署</h3><p>部署时需要替换hbase的lib中版本不一致的hadoop相关jar包，如果使用了hadoop HA别名的话需要在hbase/conf下建立hdfs-site.xml和core-site.xml的软连接，写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>hbase.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"></div><div class="line">tar -xvf ./hbase-1.2.6-bin.tar.gz</div><div class="line">mv ./hbase-1.2.6 /usr/hbase</div><div class="line"></div><div class="line">mv /usr/hbase/lib/hadoop-annotations-2.5.1.jar /usr/hbase/lib/hadoop-annotations-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-auth-2.5.1.jar /usr/hbase/lib/hadoop-auth-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-common-2.5.1.jar /usr/hbase/lib/hadoop-common-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-client-2.5.1.jar /usr/hbase/lib/hadoop-client-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-hdfs-2.5.1.jar /usr/hbase/lib/hadoop-hdfs-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-mapreduce-client-jobclient-2.5.1.jar /usr/hbase/lib/hadoop-mapreduce-client-jobclient-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-mapreduce-client-app-2.5.1.jar /usr/hbase/lib/hadoop-mapreduce-client-app-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-mapreduce-client-shuffle-2.5.1.jar /usr/hbase/lib/hadoop-mapreduce-client-shuffle-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-mapreduce-client-common-2.5.1.jar /usr/hbase/lib/hadoop-mapreduce-client-common-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-mapreduce-client-core-2.5.1.jar /usr/hbase/lib/hadoop-mapreduce-client-core-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-yarn-server-common-2.5.1.jar /usr/hbase/lib/hadoop-yarn-server-common-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-yarn-common-2.5.1.jar /usr/hbase/lib/hadoop-yarn-common-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-yarn-api-2.5.1.jar /usr/hbase/lib/hadoop-yarn-api-2.5.1.jar.bak</div><div class="line">mv /usr/hbase/lib/hadoop-yarn-client-2.5.1.jar /usr/hbase/lib/hadoop-yarn-client-2.5.1.jar.bak</div><div class="line"></div><div class="line">cp /usr/hadoop/share/hadoop/common/lib/hadoop-auth-2.7.3.jar /usr/hbase/lib/hadoop-auth-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/common/lib/hadoop-annotations-2.7.3.jar /usr/hbase/lib/hadoop-annotations-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/common/hadoop-common-2.7.3.jar /usr/hbase/lib/hadoop-common-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/hdfs/hadoop-hdfs-2.7.3.jar /usr/hbase/lib/hadoop-hdfs-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.3.jar /usr/hbase/lib/hadoop-mapreduce-client-jobclient-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-app-2.7.3.jar /usr/hbase/lib/hadoop-mapreduce-client-app-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-shuffle-2.7.3.jar /usr/hbase/lib/hadoop-mapreduce-client-shuffle-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-common-2.7.3.jar /usr/hbase/lib/hadoop-mapreduce-client-common-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-client-core-2.7.3.jar /usr/hbase/lib/hadoop-mapreduce-client-core-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/yarn/hadoop-yarn-server-common-2.7.3.jar /usr/hbase/lib/hadoop-yarn-server-common-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/yarn/hadoop-yarn-common-2.7.3.jar /usr/hbase/lib/hadoop-yarn-common-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/yarn/hadoop-yarn-api-2.7.3.jar /usr/hbase/lib/hadoop-yarn-api-2.7.3.jar</div><div class="line">cp /usr/hadoop/share/hadoop/yarn/hadoop-yarn-client-2.7.3.jar /usr/hbase/lib/hadoop-yarn-client-2.7.3.jar</div><div class="line">#移除HBase里面的不必要log4j的jar包</div><div class="line">mv /usr/hbase/lib/slf4j-log4j12-1.7.5.jar /usr/hbase/lib/slf4j-log4j12-1.7.5.jar.bak</div><div class="line"></div><div class="line">cp -rf ./hbase-env.sh /usr/hbase/conf/hbase-env.sh</div><div class="line">cp -rf ./hbase-site.xml /usr/hbase/conf/hbase-site.xml</div><div class="line">cp -rf ./regionservers /usr/hbase/conf/regionservers</div><div class="line"></div><div class="line">mkdir /usr/hbase/tmp</div><div class="line">#创建软连接，识别hadoop HA别名</div><div class="line">ln -s /usr/hadoop/etc/hadoop/hdfs-site.xml /usr/hbase/conf/hdfs-site.xml</div><div class="line">ln -s /usr/hadoop/etc/hadoop/core-site.xml /usr/hbase/conf/core-site.xml</div><div class="line"></div><div class="line">echo &quot;export HBASE_HOME=/usr/hbase&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$HBASE_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保hbase-env.sh，hbase-site.xml，regionservers，hbase-1.2.6-bin.tar.gz，hbase.sh在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./hbase.sh</div><div class="line">./hbase.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="2-4-部署所有节点"><a href="#2-4-部署所有节点" class="headerlink" title="2.4 部署所有节点"></a>2.4 部署所有节点</h3><p>使用sftp将hbase-env.sh，hbase-site.xml，regionservers，hbase-1.2.6-bin.tar.gz，hbase.sh传到其他所有节点上并按照以上步骤进行部署。</p>
<hr>
<h2 id="3-Hbase启动"><a href="#3-Hbase启动" class="headerlink" title="3. Hbase启动"></a>3. Hbase启动</h2><p>在启动之前将ZooKeeper和Hadoop启动。</p>
<h3 id="3-1-在node01执行以下命令"><a href="#3-1-在node01执行以下命令" class="headerlink" title="3.1 在node01执行以下命令"></a>3.1 在node01执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start-hbase.sh</div></pre></td></tr></table></figure>
<h3 id="3-2-在node02执行以下命令"><a href="#3-2-在node02执行以下命令" class="headerlink" title="3.2 在node02执行以下命令"></a>3.2 在node02执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hbase-daemon.sh start master</div></pre></td></tr></table></figure>
<h3 id="3-3-查看相应进程"><a href="#3-3-查看相应进程" class="headerlink" title="3.3 查看相应进程"></a>3.3 查看相应进程</h3><p>在node01和node02上用jps查看是否有HMaster进程，在node03, node04和node05上用jps查看是否有HRegionServer进程。</p>
<hr>
<h2 id="4-测试验证"><a href="#4-测试验证" class="headerlink" title="4. 测试验证"></a>4. 测试验证</h2><h3 id="4-1-节点状态"><a href="#4-1-节点状态" class="headerlink" title="4.1 节点状态"></a>4.1 节点状态</h3><p>查看hbase状态<a href="http://192.168.205.50:16010/：" target="_blank" rel="external">http://192.168.205.50:16010/：</a><br><img src="/images/2017/06/21/1356.png"></p>
<h3 id="4-2-hbase-shell测试"><a href="#4-2-hbase-shell测试" class="headerlink" title="4.2 hbase shell测试"></a>4.2 hbase shell测试</h3><h4 id="4-2-1-进入hbase-shell命令行："><a href="#4-2-1-进入hbase-shell命令行：" class="headerlink" title="4.2.1 进入hbase shell命令行："></a>4.2.1 进入hbase shell命令行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hbase shell</div></pre></td></tr></table></figure>
<p><img src="/images/2017/06/21/1357.png"></p>
<h4 id="4-2-2-建立一个表-具有三个列族member-id-、address、info："><a href="#4-2-2-建立一个表-具有三个列族member-id-、address、info：" class="headerlink" title="4.2.2 建立一个表,具有三个列族member_id 、address、info："></a>4.2.2 建立一个表,具有三个列族member_id 、address、info：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create &apos;member&apos;,&apos;member_id&apos;,&apos;address&apos;,&apos;info&apos;</div></pre></td></tr></table></figure>
<p><img src="/images/2017/06/21/1358.png"></p>
<h4 id="4-2-3-查看当前HBase中具有哪些表："><a href="#4-2-3-查看当前HBase中具有哪些表：" class="headerlink" title="4.2.3 查看当前HBase中具有哪些表："></a>4.2.3 查看当前HBase中具有哪些表：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list</div></pre></td></tr></table></figure>
<p><img src="/images/2017/06/21/1359.png"></p>
<h4 id="4-2-4-查看表的构造："><a href="#4-2-4-查看表的构造：" class="headerlink" title="4.2.4 查看表的构造："></a>4.2.4 查看表的构造：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">describe &apos;member&apos; </div></pre></td></tr></table></figure>
<p><img src="/images/2017/06/21/1400.png"><br><img src="/images/2017/06/21/1401.png"></p>
<h4 id="4-2-5-删除member表："><a href="#4-2-5-删除member表：" class="headerlink" title="4.2.5 删除member表："></a>4.2.5 删除member表：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disable &apos;member&apos; </div></pre></td></tr></table></figure>
<p><img src="/images/2017/06/21/1402.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop &apos;member&apos; </div></pre></td></tr></table></figure><br><img src="/images/2017/06/21/1403.png"></p>
<h4 id="4-2-6-退出shell："><a href="#4-2-6-退出shell：" class="headerlink" title="4.2.6 退出shell："></a>4.2.6 退出shell：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/u011414200/article/details/50383512" target="_blank" rel="external">Hbase HA 分布式搭建</a><br><a href="http://www.voidcn.com/blog/darkdragonking/article/p-6630664.html" target="_blank" rel="external">在hadoop2.8的HA+zookeeper的环境下安装分布式HBase 1.2.5</a><br><a href="http://www.micmiu.com/bigdata/hbase/hbase-setup-full-distributed/" target="_blank" rel="external">HBase安装配置之完全分布式模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍Hbase集群安装。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(2):Hadoop</title>
    <link href="http://www.jumpbeandev.com/2017/06/14/hadoop2/"/>
    <id>http://www.jumpbeandev.com/2017/06/14/hadoop2/</id>
    <published>2017-06-14T10:19:49.000Z</published>
    <updated>2017-06-26T06:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍Hadoop集群安装。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>hadoop2中NameNode可以有多个（目前只支持2个）。每一个都有相同的职能。一个是active状态的，一个是standby状态的。当集群运行时，只有active状态的NameNode是正常工作的，standby状态的NameNode是处于待命状态的，时刻同步active状态NameNode的数据。一旦active状态的NameNode不能工作，standby状态的NameNode就可以转变为active状态的，就可以继续工作了。<br>2个NameNode的数据其实是实时共享的。新HDFS采用了一种共享机制，Quorum Journal Node（JournalNode）集群或者Nnetwork File System（NFS）进行共享。NFS是操作系统层面的，JournalNode是hadoop层面的，我们这里使用JournalNode集群进行数据共享（这也是主流的做法）。JournalNode的架构图如下：<br><img src="/images/2017/06/14/1020.png"><br>两个NameNode为了数据同步，会通过一组称作JournalNodes的独立进程进行相互通信。当active状态的NameNode的命名空间有任何修改时，会告知大部分的JournalNodes进程。standby状态的NameNode有能力读取JNs中的变更信息，并且一直监控edit log的变化，把变化应用于自己的命名空间。standby可以确保在集群出错时，命名空间状态已经完全同步了。<br>对于HA集群而言，确保同一时刻只有一个NameNode处于active状态是至关重要的。否则，两个NameNode的数据状态就会产生分歧，可能丢失数据，或者产生错误的结果。为了保证这点，这就需要利用使用ZooKeeper了。首先HDFS集群中的两个NameNode都在ZooKeeper中注册，当active状态的NameNode出故障时，ZooKeeper能检测到这种情况，它就会自动把standby状态的NameNode切换为active状态。</p>
<hr>
<h2 id="2-服务器信息及节点分配"><a href="#2-服务器信息及节点分配" class="headerlink" title="2. 服务器信息及节点分配"></a>2. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="3-安装Hadoop"><a href="#3-安装Hadoop" class="headerlink" title="3. 安装Hadoop"></a>3. 安装Hadoop</h2><h3 id="3-1-下载安装包"><a href="#3-1-下载安装包" class="headerlink" title="3.1 下载安装包"></a>3.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz</div></pre></td></tr></table></figure>
<h3 id="3-2-创建模板配置文件"><a href="#3-2-创建模板配置文件" class="headerlink" title="3.2 创建模板配置文件"></a>3.2 创建模板配置文件</h3><p>需要修改的配置文件为core-site.xml，hadoop-env.sh，hdfs-site.xml，mapred-site.xml，slaves，yarn-env.sh，yarn-site.xml。</p>
<h4 id="3-2-1-core-site-xml"><a href="#3-2-1-core-site-xml" class="headerlink" title="3.2.1 core-site.xml"></a>3.2.1 core-site.xml</h4><p>注意hadoop集群中的主机名不能带有下划线。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;!-- 指定hdfs的nameservice为ctns--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">        &lt;value&gt;hdfs://ctns&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--指定hadoop数据临时存放目录--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;file:/usr/hadoop/tmp&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;io.file.buffer.size&lt;/name&gt;</div><div class="line">        &lt;value&gt;4096&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!--指定zookeeper地址--&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</div><div class="line">        &lt;value&gt;node01:2181,node02:2181,node03:2181,node04:2181,node05:2181&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-2-2-hdfs-site-xml"><a href="#3-2-2-hdfs-site-xml" class="headerlink" title="3.2.2 hdfs-site.xml"></a>3.2.2 hdfs-site.xml</h4><p>采用双namenode的HA配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;!-- 指定hdfs的nameservice为ctns，需要和core-site.xml中的保持一致 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.nameservices&lt;/name&gt;</div><div class="line">        &lt;value&gt;ctns&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- ctns下面有两个NameNode，分别是node01，node02 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.ha.namenodes.ctns&lt;/name&gt;</div><div class="line">        &lt;value&gt;node01, node02&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- node01 的RPC通信地址 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.rpc-address.ctns.node01&lt;/name&gt;</div><div class="line">        &lt;value&gt;node01:9000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- node01 的http通信地址 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.http-address.ctns.node01&lt;/name&gt;</div><div class="line">        &lt;value&gt;node01:50070&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- node02 的RPC通信地址 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.rpc-address.ctns.node02&lt;/name&gt;</div><div class="line">        &lt;value&gt;node02:9000&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- node02 的http通信地址 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.namenode.http-address.ctns.node02&lt;/name&gt;</div><div class="line">        &lt;value&gt;node02:50070&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">       &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</div><div class="line">       &lt;value&gt;qjournal://node01:8485;node02:8485;node03:8485;node04:8485;node05:8485/ctns&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</div><div class="line">        &lt;value&gt;/usr/hadoop/journal&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 开启NameNode故障时自动切换 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</div><div class="line">        &lt;value&gt;true&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 配置失败自动切换实现方式 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">          &lt;name&gt;dfs.client.failover.proxy.provider.ctns&lt;/name&gt;</div><div class="line">          &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 配置隔离机制 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">           &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</div><div class="line">           &lt;value&gt;sshfence&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 使用隔离机制时需要ssh免登陆 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">          &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</div><div class="line">          &lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;!-- 当前节点为name节点时的元信息存储路径.这个参数设置为多个目录，那么这些目录下都保存着元信息的多个备份 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">      &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</div><div class="line">      &lt;value&gt;file:///usr/hadoop/hdfs/name&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 当前节点为data节点时的元信息存储路径.这个参数设置为多个目录，那么这些目录下都保存着数据信息的多个备份 --&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">      &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</div><div class="line">      &lt;value&gt;file:///usr/hadoop/hdfs/data&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">        &lt;value&gt;2&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;dfs.permissions.enabled&lt;/name&gt;</div><div class="line">        &lt;value&gt;false&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-2-3-mapred-site-xml"><a href="#3-2-3-mapred-site-xml" class="headerlink" title="3.2.3 mapred-site.xml"></a>3.2.3 mapred-site.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">        &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="3-2-4-yarn-site-xml"><a href="#3-2-4-yarn-site-xml" class="headerlink" title="3.2.4 yarn-site.xml"></a>3.2.4 yarn-site.xml</h4><p>采用双resourcemanager的HA配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.connect.retry-interval.ms&lt;/name&gt;</div><div class="line">          &lt;value&gt;2000&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 超时的周期 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</div><div class="line">          &lt;value&gt;true&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 打开高可用 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.enabled&lt;/name&gt;</div><div class="line">          &lt;value&gt;true&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 启动故障自动恢复 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.embedded&lt;/name&gt;</div><div class="line">          &lt;value&gt;true&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</div><div class="line">           &lt;value&gt;yarn-rm-cluster&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 给yarn cluster 取个名字yarn-rm-cluster --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</div><div class="line">          &lt;value&gt;rm1,rm2&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 给ResourceManager 取个名字 rm1,rm2 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</div><div class="line">          &lt;value&gt;node01&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 配置ResourceManager rm1 hostname --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</div><div class="line">          &lt;value&gt;node02&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 配置ResourceManager rm2 hostname --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">           &lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt;</div><div class="line">          &lt;value&gt;true&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 启用resourcemanager 自动恢复 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.zk.state-store.address&lt;/name&gt;</div><div class="line">           &lt;value&gt;node01:2181,node02:2181,node03:2181,node04:2181,node05:2181&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 配置Zookeeper地址 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">           &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</div><div class="line">          &lt;value&gt;node01:2181,node02:2181,node03:2181,node04:2181,node05:2181&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 配置Zookeeper地址 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">           &lt;name&gt;yarn.resourcemanager.address.rm1&lt;/name&gt;</div><div class="line">          &lt;value&gt;node01:8032&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!--  rm1端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.scheduler.address.rm1&lt;/name&gt;</div><div class="line">          &lt;value&gt;node01:8034&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- rm1调度器的端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</div><div class="line">          &lt;value&gt;node01:8088&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- rm1 webapp端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.address.rm2&lt;/name&gt;</div><div class="line">     &lt;value&gt;node02:8032&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- rm2端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.scheduler.address.rm2&lt;/name&gt;</div><div class="line">          &lt;value&gt;node02:8034&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- rm2调度器的端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">          &lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;</div><div class="line">          &lt;value&gt;node02:8088&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- rm2 webapp端口号 --&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">           &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">          &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;property&gt;</div><div class="line">           &lt;name&gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class&lt;/name&gt;</div><div class="line">          &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</div><div class="line">     &lt;/property&gt;</div><div class="line">     &lt;!-- 执行MapReduce需要配置的shuffle过程 --&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-2-5-slaves"><a href="#3-2-5-slaves" class="headerlink" title="3.2.5 slaves"></a>3.2.5 slaves</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node03</div><div class="line">node04</div><div class="line">node05</div></pre></td></tr></table></figure>
<h4 id="3-2-6-hadoop-env-sh-amp-yarn-env-sh"><a href="#3-2-6-hadoop-env-sh-amp-yarn-env-sh" class="headerlink" title="3.2.6 hadoop-env.sh &amp; yarn-env.sh"></a>3.2.6 hadoop-env.sh &amp; yarn-env.sh</h4><p>添加JAVA_HOME:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre</div></pre></td></tr></table></figure></p>
<h3 id="3-3-安装部署"><a href="#3-3-安装部署" class="headerlink" title="3.3 安装部署"></a>3.3 安装部署</h3><p>写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>hadoop.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># /bin/bash</div><div class="line"></div><div class="line">tar -xvf ./hadoop-2.7.3.tar.gz</div><div class="line">mv ./hadoop-2.7.3 /usr/hadoop</div><div class="line">mkdir -p /usr/hadoop/hdfs/data /usr/hadoop/hdfs/name /usr/hadoop/tmp</div><div class="line">cp -rf ./core-site.xml /usr/hadoop/etc/hadoop/core-site.xml</div><div class="line">cp -rf ./hadoop-env.sh /usr/hadoop/etc/hadoop/hadoop-env.sh</div><div class="line">cp -rf ./hdfs-site.xml /usr/hadoop/etc/hadoop/hdfs-site.xml</div><div class="line">cp -rf ./mapred-site.xml /usr/hadoop/etc/hadoop/mapred-site.xml</div><div class="line">cp -rf ./slaves /usr/hadoop/etc/hadoop/slaves</div><div class="line">cp -rf ./yarn-env.sh /usr/hadoop/etc/hadoop/yarn-env.sh</div><div class="line">cp -rf ./yarn-site.xml /usr/hadoop/etc/hadoop/yarn-site.xml</div><div class="line">echo &quot;export HADOOP_HOME=/usr/hadoop&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$HADOOP_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$HADOOP_HOME/sbin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保core-site.xml，hadoop-2.7.3.tar.gz，hadoop-env.sh，hadoop.sh，hdfs-site.xml，mapred-site.xml，slaves，yarn-env.sh，yarn-site.xml在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./hadoop.sh</div><div class="line">./hadoop.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="3-4-部署所有节点"><a href="#3-4-部署所有节点" class="headerlink" title="3.4 部署所有节点"></a>3.4 部署所有节点</h3><p>使用sftp将core-site.xml，hadoop-2.7.3.tar.gz，hadoop-env.sh，hadoop.sh，hdfs-site.xml，mapred-site.xml，slaves，yarn-env.sh，yarn-site.xml传到其他所有节点上并按照以上步骤进行部署。</p>
<hr>
<h2 id="4-Hadoop启动"><a href="#4-Hadoop启动" class="headerlink" title="4. Hadoop启动"></a>4. Hadoop启动</h2><p>注意首次初始化启动命令和之后启动的命令是不同的，首次启动比较复杂，步骤不对的话就会报错，不过之后就好了。</p>
<h3 id="4-1-首次启动命令"><a href="#4-1-首次启动命令" class="headerlink" title="4.1 首次启动命令"></a>4.1 首次启动命令</h3><h4 id="4-1-1-如果未启动Zookeeper，首先启动各个节点的Zookeeper，在各个节点上执行以下命令："><a href="#4-1-1-如果未启动Zookeeper，首先启动各个节点的Zookeeper，在各个节点上执行以下命令：" class="headerlink" title="4.1.1 如果未启动Zookeeper，首先启动各个节点的Zookeeper，在各个节点上执行以下命令："></a>4.1.1 如果未启动Zookeeper，首先启动各个节点的Zookeeper，在各个节点上执行以下命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkServer.sh start</div></pre></td></tr></table></figure>
<h4 id="4-1-2-在某一个namenode节点执行如下命令，创建命名空间："><a href="#4-1-2-在某一个namenode节点执行如下命令，创建命名空间：" class="headerlink" title="4.1.2 在某一个namenode节点执行如下命令，创建命名空间："></a>4.1.2 在某一个namenode节点执行如下命令，创建命名空间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs zkfc -formatZK</div></pre></td></tr></table></figure>
<h4 id="4-1-3-在每个journalnode节点用如下命令启动journalnode："><a href="#4-1-3-在每个journalnode节点用如下命令启动journalnode：" class="headerlink" title="4.1.3 在每个journalnode节点用如下命令启动journalnode："></a>4.1.3 在每个journalnode节点用如下命令启动journalnode：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop-daemon.sh start journalnode</div></pre></td></tr></table></figure>
<h4 id="4-1-4-在主namenode节点用格式化namenode和journalnode目录："><a href="#4-1-4-在主namenode节点用格式化namenode和journalnode目录：" class="headerlink" title="4.1.4 在主namenode节点用格式化namenode和journalnode目录："></a>4.1.4 在主namenode节点用格式化namenode和journalnode目录：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs namenode -format ctns</div></pre></td></tr></table></figure>
<h4 id="4-1-5-在主namenode节点启动namenode进程："><a href="#4-1-5-在主namenode节点启动namenode进程：" class="headerlink" title="4.1.5 在主namenode节点启动namenode进程："></a>4.1.5 在主namenode节点启动namenode进程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop-daemon.sh start namenode</div></pre></td></tr></table></figure>
<h4 id="4-1-6-在备namenode节点执行第一行命令，这个是把备namenode节点的目录格式化并把元数据从主namenode节点copy过来，并且这个命令不会把journalnode目录再格式化了，然后用第二个命令启动备namenode进程："><a href="#4-1-6-在备namenode节点执行第一行命令，这个是把备namenode节点的目录格式化并把元数据从主namenode节点copy过来，并且这个命令不会把journalnode目录再格式化了，然后用第二个命令启动备namenode进程：" class="headerlink" title="4.1.6 在备namenode节点执行第一行命令，这个是把备namenode节点的目录格式化并把元数据从主namenode节点copy过来，并且这个命令不会把journalnode目录再格式化了，然后用第二个命令启动备namenode进程："></a>4.1.6 在备namenode节点执行第一行命令，这个是把备namenode节点的目录格式化并把元数据从主namenode节点copy过来，并且这个命令不会把journalnode目录再格式化了，然后用第二个命令启动备namenode进程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hdfs namenode -bootstrapStandby</div><div class="line">hadoop-daemon.sh start namenode</div></pre></td></tr></table></figure>
<h4 id="4-1-7-在两个namenode节点都执行以下命令："><a href="#4-1-7-在两个namenode节点都执行以下命令：" class="headerlink" title="4.1.7 在两个namenode节点都执行以下命令："></a>4.1.7 在两个namenode节点都执行以下命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop-daemon.sh start zkfc</div></pre></td></tr></table></figure>
<h4 id="4-1-8-在所有datanode节点都执行以下命令启动datanode："><a href="#4-1-8-在所有datanode节点都执行以下命令启动datanode：" class="headerlink" title="4.1.8 在所有datanode节点都执行以下命令启动datanode："></a>4.1.8 在所有datanode节点都执行以下命令启动datanode：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop-daemon.sh start datanode</div></pre></td></tr></table></figure>
<h4 id="4-1-9-启动resourcemanager和nodemanager："><a href="#4-1-9-启动resourcemanager和nodemanager：" class="headerlink" title="4.1.9 启动resourcemanager和nodemanager："></a>4.1.9 启动resourcemanager和nodemanager：</h4><p>在node01上执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yarn-daemon.sh start resourcemanager</div><div class="line">yarn-daemons.sh start nodemanager</div></pre></td></tr></table></figure></p>
<h3 id="4-2-日常启停命令"><a href="#4-2-日常启停命令" class="headerlink" title="4.2 日常启停命令"></a>4.2 日常启停命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./start-all.sh</div><div class="line">./stop-all.sh</div></pre></td></tr></table></figure>
<hr>
<h2 id="5-测试验证"><a href="#5-测试验证" class="headerlink" title="5. 测试验证"></a>5. 测试验证</h2><h3 id="5-1-节点状态"><a href="#5-1-节点状态" class="headerlink" title="5.1 节点状态"></a>5.1 节点状态</h3><p>查看namenode状态<a href="http://192.168.205.50:50070/：" target="_blank" rel="external">http://192.168.205.50:50070/：</a><br><img src="/images/2017/06/14/1869.png"><br><a href="http://192.168.205.62:50070/：" target="_blank" rel="external">http://192.168.205.62:50070/：</a><br><img src="/images/2017/06/14/1868.png"><br>查看resourcemanager状态<a href="http://192.168.205.62:8088/：" target="_blank" rel="external">http://192.168.205.62:8088/：</a><br><img src="/images/2017/06/14/1011.png"></p>
<h3 id="5-2-mapreduce"><a href="#5-2-mapreduce" class="headerlink" title="5.2 mapreduce"></a>5.2 mapreduce</h3><p>创建input目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -mkdir -p /hadoop/input</div></pre></td></tr></table></figure><br>使用hadoop的根目录下自带的LICENSE.txt文件测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -put /usr/hadoop/LICENSE.txt /hadoop/input</div></pre></td></tr></table></figure><br>使用wordcount测试类进行处理测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/hadoop/share/hadoop/mapreduce/</div><div class="line">ls  --查看hadoop-mapreduce-examples-2.7.3.jar</div><div class="line">hadoop jar hadoop-mapreduce-examples-2.7.3.jar wordcount /hadoop/input /hadoop/output</div></pre></td></tr></table></figure><br>稍后会在/hadoop/output路径下看到结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hadoop fs -ls /hadoop/output</div></pre></td></tr></table></figure></p>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/trigl/article/details/52401847" target="_blank" rel="external">hadoop、zookeeper、hbase、spark集群环境搭建</a><br><a href="http://blog.csdn.net/trigl/article/details/55101826" target="_blank" rel="external">Hadoop双namenode配置搭建（HA）</a><br><a href="http://www.voidcn.com/blog/darkdragonking/article/p-6610071.html" target="_blank" rel="external">Hadoop的namenode 从单点向双namenode的HA的升级过程，含wordcount验证</a><br><a href="http://blog.csdn.net/u010270403/article/details/51446674" target="_blank" rel="external">搭建5个节点的hadoop集群环境（CDH5）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍Hadoop集群安装。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(1):Zookeeper</title>
    <link href="http://www.jumpbeandev.com/2017/06/12/hadoop1/"/>
    <id>http://www.jumpbeandev.com/2017/06/12/hadoop1/</id>
    <published>2017-06-12T07:58:14.000Z</published>
    <updated>2017-06-26T06:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍Zookeeper集群安装。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-服务器信息及节点分配"><a href="#1-服务器信息及节点分配" class="headerlink" title="1. 服务器信息及节点分配"></a>1. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="2-安装Zookeeper"><a href="#2-安装Zookeeper" class="headerlink" title="2. 安装Zookeeper"></a>2. 安装Zookeeper</h2><h3 id="2-1-下载安装包"><a href="#2-1-下载安装包" class="headerlink" title="2.1 下载安装包"></a>2.1 下载安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>
<h3 id="2-2-创建zoo-cfg"><a href="#2-2-创建zoo-cfg" class="headerlink" title="2.2 创建zoo.cfg"></a>2.2 创建zoo.cfg</h3><p>复制zoo_sample.cfg为zoo.cfg，修改dataDir和dataLogDir路径，并在最后添加节点信息：<br><figure class="highlight plain"><figcaption><span>zoo.cfg</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial</div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between</div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># the directory where the snapshot is stored.</div><div class="line"># do not use /tmp for storage, /tmp here is just</div><div class="line"># example sakes.</div><div class="line">dataDir=/usr/zookeeper/data</div><div class="line">dataLogDir=/usr/zookeeper/logs</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div><div class="line"># the maximum number of client connections.</div><div class="line"># increase this if you need to handle more clients</div><div class="line">#maxClientCnxns=60</div><div class="line">#</div><div class="line"># Be sure to read the maintenance section of the</div><div class="line"># administrator guide before turning on autopurge.</div><div class="line">#</div><div class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</div><div class="line">#</div><div class="line"># The number of snapshots to retain in dataDir</div><div class="line">#autopurge.snapRetainCount=3</div><div class="line"># Purge task interval in hours</div><div class="line"># Set to &quot;0&quot; to disable auto purge feature</div><div class="line">#autopurge.purgeInterval=1</div><div class="line"></div><div class="line">server.1=node01:2888:3888</div><div class="line">server.2=node02:2888:3888</div><div class="line">server.3=node03:2888:3888</div><div class="line">server.4=node04:2888:3888</div><div class="line">server.5=node05:2888:3888</div></pre></td></tr></table></figure></p>
<h3 id="2-3-安装部署"><a href="#2-3-安装部署" class="headerlink" title="2.3 安装部署"></a>2.3 安装部署</h3><p>写一个简易部署脚本：<br><figure class="highlight plain"><figcaption><span>zk.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># /bin/bash</div><div class="line"></div><div class="line">tar -xvf ./zookeeper-3.4.10.tar.gz</div><div class="line">mv ./zookeeper-3.4.10 /usr/zookeeper</div><div class="line">mkdir /usr/zookeeper/data</div><div class="line">mkdir /usr/zookeeper/logs</div><div class="line">mv ./zoo.cfg /usr/zookeeper/conf/zoo.cfg</div><div class="line">echo &quot;export ZOOKEEPER_HOME=/usr/zookeeper&quot; &gt;&gt; /root/.bash_profile</div><div class="line">echo &quot;export PATH=\$ZOOKEEPER_HOME/bin:\$PATH&quot; &gt;&gt; /root/.bash_profile</div></pre></td></tr></table></figure><br>修改权限并执行，执行时确保zk.sh, zoo.cfg和zookeeper-3.4.10.tar.gz在同一目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x ./zk.sh</div><div class="line">./zk.sh</div><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h3 id="2-4-创建myid"><a href="#2-4-创建myid" class="headerlink" title="2.4 创建myid"></a>2.4 创建myid</h3><p>在zookeeper的dataDir下添加myid，记录该节点的zk id，注意id要与zoo.cfg中该节点的server.x匹配，以server.1为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/zookeeper/data</div><div class="line">echo &quot;1&quot; &gt; myid</div></pre></td></tr></table></figure></p>
<h3 id="2-5-部署所有节点"><a href="#2-5-部署所有节点" class="headerlink" title="2.5 部署所有节点"></a>2.5 部署所有节点</h3><p>使用sftp将zk.sh, zoo.cfg, zookeeper-3.4.10.tar.gz传到其他所有节点上并按照以上步骤进行部署。</p>
<hr>
<h2 id="3-Zookeeper使用"><a href="#3-Zookeeper使用" class="headerlink" title="3. Zookeeper使用"></a>3. Zookeeper使用</h2><h3 id="3-1-启动Zookeeper集群"><a href="#3-1-启动Zookeeper集群" class="headerlink" title="3.1 启动Zookeeper集群"></a>3.1 启动Zookeeper集群</h3><p>所有节点上执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkServer.sh start</div></pre></td></tr></table></figure></p>
<h3 id="3-2-查看Zookeeper状态"><a href="#3-2-查看Zookeeper状态" class="headerlink" title="3.2 查看Zookeeper状态"></a>3.2 查看Zookeeper状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@node01 ~]# zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line">[root@node01 ~]# ssh node02</div><div class="line">[root@node02 ~]# zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line">[root@node02 ~]# ssh node03</div><div class="line">[root@node03 ~]# zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line">[root@node03 ~]# ssh node04</div><div class="line">[root@node04 ~]# zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line">[root@node04 ~]# ssh node05</div><div class="line">[root@node05 ~]# zkServer.sh status</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /usr/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: leader</div></pre></td></tr></table></figure>
<h3 id="3-3-停止Zookeeper"><a href="#3-3-停止Zookeeper" class="headerlink" title="3.3 停止Zookeeper"></a>3.3 停止Zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkServer.sh stop</div></pre></td></tr></table></figure>
<h3 id="3-4-重启Zookeeper"><a href="#3-4-重启Zookeeper" class="headerlink" title="3.4 重启Zookeeper"></a>3.4 重启Zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zkServer.sh restart</div></pre></td></tr></table></figure>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/trigl/article/details/52401847" target="_blank" rel="external">hadoop、zookeeper、hbase、spark集群环境搭建</a><br><a href="http://www.cnblogs.com/liugh/p/6671460.html" target="_blank" rel="external">Zookeeper3.4.9分布式集群安装</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍Zookeeper集群安装。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>搭建5节点hadoop+zookeeper+hbase+spark+kafka+storm(0):准备</title>
    <link href="http://www.jumpbeandev.com/2017/06/12/hadoop0/"/>
    <id>http://www.jumpbeandev.com/2017/06/12/hadoop0/</id>
    <published>2017-06-12T06:16:11.000Z</published>
    <updated>2017-06-26T06:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍安装前的准备工作。<br>版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。<br>以下操作都是以root用户进行，如需用户组和权限设定需自行配置。<br><a id="more"></a></p>
<hr>
<h2 id="1-服务器信息及节点分配"><a href="#1-服务器信息及节点分配" class="headerlink" title="1. 服务器信息及节点分配"></a>1. 服务器信息及节点分配</h2><p>服务器信息：</p>
<table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">内网IP</th>
<th style="text-align:center">外网IP</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">node01</td>
<td style="text-align:center">192.168.5.11</td>
<td style="text-align:center">192.168.205.50</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">node02</td>
<td style="text-align:center">192.168.5.12</td>
<td style="text-align:center">192.168.205.62</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">node03</td>
<td style="text-align:center">192.168.5.13</td>
<td style="text-align:center">192.168.205.63</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">node04</td>
<td style="text-align:center">192.168.5.14</td>
<td style="text-align:center">192.168.205.70</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">node05</td>
<td style="text-align:center">192.168.5.15</td>
<td style="text-align:center">192.168.205.102</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<p>节点分配：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点</th>
<th style="text-align:center">node01</th>
<th style="text-align:center">node02</th>
<th style="text-align:center">node03</th>
<th style="text-align:center">node04</th>
<th style="text-align:center">node05</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">namenode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">datanode</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">journalnode</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">zookeeper</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">hbase</td>
<td style="text-align:center">主Master</td>
<td style="text-align:center">备份Master</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
<td style="text-align:center">RegionServer</td>
</tr>
<tr>
<td style="text-align:center">spark</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">kafka</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">storm</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="2-修改hosts文件和主机名"><a href="#2-修改hosts文件和主机名" class="headerlink" title="2. 修改hosts文件和主机名"></a>2. 修改hosts文件和主机名</h2><p>分别修改5个服务器的hosts文件和主机名。</p>
<h3 id="2-1-修改hosts文件"><a href="#2-1-修改hosts文件" class="headerlink" title="2.1 修改hosts文件"></a>2.1 修改hosts文件</h3><p>编辑hosts文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/hosts</div></pre></td></tr></table></figure><br>添加下面内容，注意使用内网ip，浮动ip可能导致端口无法绑定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192.168.5.11 node01</div><div class="line">192.168.5.12 node02</div><div class="line">192.168.5.13 node03</div><div class="line">192.168.5.14 node04</div><div class="line">192.168.5.15 node05</div></pre></td></tr></table></figure></p>
<h3 id="2-2-修改主机名"><a href="#2-2-修改主机名" class="headerlink" title="2.2 修改主机名"></a>2.2 修改主机名</h3><p>使用hostname修改主机名为node01/node02/node03/node04/node05。注意主机名和hosts文件中设置的名称应当保持一致，否则会产生意外的错误。</p>
<hr>
<h2 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3. 关闭防火墙"></a>3. 关闭防火墙</h2><h3 id="3-1-关闭命令"><a href="#3-1-关闭命令" class="headerlink" title="3.1 关闭命令"></a>3.1 关闭命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">chkconfig iptables off</div></pre></td></tr></table></figure>
<h3 id="3-2-查看防火墙状态"><a href="#3-2-查看防火墙状态" class="headerlink" title="3.2 查看防火墙状态"></a>3.2 查看防火墙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables status </div></pre></td></tr></table></figure>
<hr>
<h2 id="4-设置NTP时间同步"><a href="#4-设置NTP时间同步" class="headerlink" title="4. 设置NTP时间同步"></a>4. 设置NTP时间同步</h2><p>为了保证集群内的时间是一致的，我们可以将其中的一台主机作为时间服务器，其他主机设置定时任务每天与时间服务器同步一次时间。</p>
<h3 id="4-1-配置某台主机为ntp时间服务器"><a href="#4-1-配置某台主机为ntp时间服务器" class="headerlink" title="4.1 配置某台主机为ntp时间服务器"></a>4.1 配置某台主机为ntp时间服务器</h3><h4 id="4-1-1-安装ntp"><a href="#4-1-1-安装ntp" class="headerlink" title="4.1.1 安装ntp"></a>4.1.1 安装ntp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install ntp</div></pre></td></tr></table></figure>
<h4 id="4-1-2-修改配置文件-etc-ntp-conf"><a href="#4-1-2-修改配置文件-etc-ntp-conf" class="headerlink" title="4.1.2 修改配置文件/etc/ntp.conf"></a>4.1.2 修改配置文件/etc/ntp.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#允许192.*.*.*的主机进行时间同步</div><div class="line">restrict 192.0.0.0 mask 255.0.0.0 nomodify notrap</div></pre></td></tr></table></figure>
<h4 id="4-1-3-手动同步"><a href="#4-1-3-手动同步" class="headerlink" title="4.1.3 手动同步"></a>4.1.3 手动同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 0.asia.pool.ntp.org</div></pre></td></tr></table></figure>
<h4 id="4-1-4-启动服务"><a href="#4-1-4-启动服务" class="headerlink" title="4.1.4 启动服务"></a>4.1.4 启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ntpd start</div></pre></td></tr></table></figure>
<h4 id="4-1-5-开机启动"><a href="#4-1-5-开机启动" class="headerlink" title="4.1.5 开机启动"></a>4.1.5 开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig ntpd on</div></pre></td></tr></table></figure>
<h3 id="4-2-配置其他主机为ntp客户端"><a href="#4-2-配置其他主机为ntp客户端" class="headerlink" title="4.2 配置其他主机为ntp客户端"></a>4.2 配置其他主机为ntp客户端</h3><h4 id="4-2-1-安装ntp"><a href="#4-2-1-安装ntp" class="headerlink" title="4.2.1 安装ntp"></a>4.2.1 安装ntp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install ntp</div></pre></td></tr></table></figure>
<h4 id="4-2-2-修改配置文件-etc-ntp-conf"><a href="#4-2-2-修改配置文件-etc-ntp-conf" class="headerlink" title="4.2.2 修改配置文件/etc/ntp.conf"></a>4.2.2 修改配置文件/etc/ntp.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#注释默认配置，添加刚刚创建的ntpserver</div><div class="line">#server 0.centos.pool.ntp.org iburst</div><div class="line">#server 1.centos.pool.ntp.org iburst</div><div class="line">#server 2.centos.pool.ntp.org iburst</div><div class="line">#server 3.centos.pool.ntp.org iburst</div><div class="line">server 192.168.5.11</div></pre></td></tr></table></figure>
<h4 id="4-2-3-编辑定时器任务"><a href="#4-2-3-编辑定时器任务" class="headerlink" title="4.2.3 编辑定时器任务"></a>4.2.3 编辑定时器任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo crontab -e</div></pre></td></tr></table></figure>
<p>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 0 * * * /usr/sbin/ntpdate 192.168.5.11 &gt;&gt; /usr/hadoop/logs/ntpd.log</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="5-配置SSH免登录"><a href="#5-配置SSH免登录" class="headerlink" title="5. 配置SSH免登录"></a>5. 配置SSH免登录</h2><h3 id="5-1-生成SSH的公钥"><a href="#5-1-生成SSH的公钥" class="headerlink" title="5.1 生成SSH的公钥"></a>5.1 生成SSH的公钥</h3><p>所有节点执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure></p>
<h3 id="5-2-设置免登录"><a href="#5-2-设置免登录" class="headerlink" title="5.2 设置免登录"></a>5.2 设置免登录</h3><p>所有节点执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id -i node01</div><div class="line">ssh-copy-id -i node02</div><div class="line">ssh-copy-id -i node03</div><div class="line">ssh-copy-id -i node04</div><div class="line">ssh-copy-id -i node05</div></pre></td></tr></table></figure></p>
<h3 id="5-3-验证"><a href="#5-3-验证" class="headerlink" title="5.3 验证"></a>5.3 验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh node02</div></pre></td></tr></table></figure>
<hr>
<h2 id="6-安装jdk"><a href="#6-安装jdk" class="headerlink" title="6. 安装jdk"></a>6. 安装jdk</h2><h3 id="6-1-yum安装openjdk"><a href="#6-1-yum安装openjdk" class="headerlink" title="6.1 yum安装openjdk"></a>6.1 yum安装openjdk</h3><p>所有节点执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install java-1.8.0-openjdk.x86_64</div><div class="line">yum install java-1.8.0-openjdk-devel.x86_64</div></pre></td></tr></table></figure><br>完成后执行以下命令验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node01 ~]# java -version</div><div class="line">openjdk version &quot;1.8.0_131&quot;</div><div class="line">OpenJDK Runtime Environment (build 1.8.0_131-b12)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.131-b12, mixed mode)</div></pre></td></tr></table></figure></p>
<h3 id="6-2-设置环境变量"><a href="#6-2-设置环境变量" class="headerlink" title="6.2 设置环境变量"></a>6.2 设置环境变量</h3><p>以bash为例，打开/root下的.bash_profile：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /root/.bash_profile</div></pre></td></tr></table></figure><br>添加JAVA_HOME：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure><br>执行以下命令生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<p>至此准备工作基本完成，下篇开始安装组件。</p>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/trigl/article/details/52401847" target="_blank" rel="external">hadoop、zookeeper、hbase、spark集群环境搭建</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍安装前的准备工作。&lt;br&gt;版本：java 1.8，Hadoop 2.7.3，HBase 1.2.5，Zookeeper 3.4.10，Spark 2.1.1，Scala 2.12.2，Kafka 0.10.2.1，Storm 1.1.0。&lt;br&gt;以下操作都是以root用户进行，如需用户组和权限设定需自行配置。&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.jumpbeandev.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://www.jumpbeandev.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://www.jumpbeandev.com/tags/zookeeper/"/>
    
      <category term="hbase" scheme="http://www.jumpbeandev.com/tags/hbase/"/>
    
      <category term="spark" scheme="http://www.jumpbeandev.com/tags/spark/"/>
    
      <category term="kafka" scheme="http://www.jumpbeandev.com/tags/kafka/"/>
    
      <category term="storm" scheme="http://www.jumpbeandev.com/tags/storm/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes一键部署Mycat+Mysql主从集群</title>
    <link href="http://www.jumpbeandev.com/2017/06/01/mysqlcluster/"/>
    <id>http://www.jumpbeandev.com/2017/06/01/mysqlcluster/</id>
    <published>2017-06-01T07:28:05.000Z</published>
    <updated>2017-06-08T08:46:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes一键部署一主一从，读写分离，自动切换的mycat+mysql架构，其中mycat配置文件、mysqsl数据文件的volume挂载未涉及，可根据实际情况进行修改。所有代码参照<a href="https://github.com/jumpjumpbean/k8smysqlcluster" target="_blank" rel="external">github k8smysqlcluster</a>。后期进行双主双从、mycat高可用的扩展。<br><a id="more"></a></p>
<hr>
<h2 id="1-Mysql复制原理"><a href="#1-Mysql复制原理" class="headerlink" title="1. Mysql复制原理"></a>1. Mysql复制原理</h2><p>Mysql内建的复制功能是构建大型，高性能应用程序的基础。将Mysql的数据分布到多个系统上去，这种分布的机制，是通过将Mysql的某一台主机的数据复制到其它主机（slaves）上，并重新执行一遍来实现的。复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。主服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。这些日志可以记录发送到从服务器的更新。当一个从服务器连接主服务器时，它通知主服务器从服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新。<br>请注意当你进行复制时，所有对复制中的表的更新必须在主服务器上进行。否则，你必须要小心，以避免用户对主服务器上的表进行的更新与对从服务器上的表所进行的更新之间的冲突。</p>
<h3 id="1-1-mysql支持的复制类型："><a href="#1-1-mysql支持的复制类型：" class="headerlink" title="1.1 mysql支持的复制类型："></a>1.1 mysql支持的复制类型：</h3><ul>
<li>基于语句的复制：在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。一旦发现没法精确复制时，   会自动选着基于行的复制。    </li>
<li>基于行的复制：把改变的内容复制过去，而不是把命令在从服务器上执行一遍. 从mysql5.0开始支持</li>
<li>混合类型的复制：默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</li>
</ul>
<h3 id="1-2-复制解决的问题"><a href="#1-2-复制解决的问题" class="headerlink" title="1.2 复制解决的问题"></a>1.2 复制解决的问题</h3><p>MySQL复制技术有以下一些特点：</p>
<ul>
<li>数据分布 (Data distribution )</li>
<li>负载平衡(load balancing)</li>
<li>备份(Backups) </li>
<li>高可用性和容错行(High availability and failover)</li>
</ul>
<h3 id="1-3-复制如何工作"><a href="#1-3-复制如何工作" class="headerlink" title="1.3 复制如何工作"></a>1.3 复制如何工作</h3><p>整体上来说，复制有3个步骤：   </p>
<ul>
<li>master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；</li>
<li>slave将master的binary log events拷贝到它的中继日志(relay log)；</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ul>
<p>下图描述了复制的过程：<br><img src="/images/2017/06/01/1044.png"><br>该过程的第一部分就是master记录二进制日志。在每个事务更新数据完成之前，master在二日志记录这些改变。MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。在事件写入二进制日志完成后，master通知存储引擎提交事务。<br>下一步就是slave将master的binary log拷贝到它自己的中继日志。首先，slave开始一个工作线程——I/O线程。I/O线程在master上打开一个普通的连接，然后开始binlog dump process。Binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件。I/O线程将这些事件写入中继日志。<br>SQL slave thread（SQL从线程）处理该过程的最后一步。SQL线程从中继日志读取事件，并重放其中的事件而更新slave的数据，使其与master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中继日志的开销很小。<br>此外，在master中也有一个工作线程：和其它MySQL的连接一样，slave在master中打开一个连接也会使得master开始一个线程。复制过程有一个很重要的限制——复制在slave上是串行化的，也就是说master上的并行更新操作不能在slave上并行操作。</p>
<hr>
<h2 id="2-Mycat介绍"><a href="#2-Mycat介绍" class="headerlink" title="2. Mycat介绍"></a>2. Mycat介绍</h2><p>从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了MySQL协议的服务器，前端用户可以把它看作是一个数据库代理，用MySQL客户端工具和命令行访问，而其后端可以用MySQL原生协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。</p>
<p>MyCat发展到目前的版本，已经不是一个单纯的MySQL代理了，它的后端可以支持MySQL、SQL Server、Oracle、DB2、PostgreSQL等主流数据库，也支持MongoDB这种新型NoSQL方式的存储，未来还会支持更多类型的存储。而在最终用户看来，无论是那种存储方式，在MyCat里，都是一个传统的数据库表，支持标准的SQL语句进行数据的操作，这样一来，对前端业务系统来说，可以大幅降低开发难度，提升开发速度。<br><img src="/images/2017/06/01/1621.jpg"></p>
<p>详细内容可参照<a href="http://www.mycat.io/" target="_blank" rel="external">Mycat官网</a>。<br>Mycat高可用方案：<br><img src="/images/2017/06/01/1623.png"></p>
<p>Mycat双主架构：<br><img src="/images/2017/06/01/1624.png"></p>
<hr>
<h2 id="3-Kubernetes部署基于Mycat的读写分离，自动切换的主从Mysql架构"><a href="#3-Kubernetes部署基于Mycat的读写分离，自动切换的主从Mysql架构" class="headerlink" title="3. Kubernetes部署基于Mycat的读写分离，自动切换的主从Mysql架构"></a>3. Kubernetes部署基于Mycat的读写分离，自动切换的主从Mysql架构</h2><p>Build出mysql-master和mysql-slave的镜像实现主从配置，build mycat镜像实现读写分离和自动切换配置，基于rc和svc yaml文件使用kubernetes进行快速部署。</p>
<h3 id="3-1-mysql-master"><a href="#3-1-mysql-master" class="headerlink" title="3.1 mysql-master"></a>3.1 mysql-master</h3><p>基于官方mysql镜像，修改mysqld.cnf添加server-id和binlog，修改docker-entrypoint.sh在mysql上创建同步账号并授权。<br><figure class="highlight plain"><figcaption><span>mysql-master Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM mysql</div><div class="line"></div><div class="line">RUN sed -i &apos;/\[mysqld\]/a server-id=1\nlog-bin=mysql-bin&apos; /etc/mysql/mysql.conf.d/mysqld.cnf</div><div class="line"></div><div class="line">RUN echo &quot;$(tac /usr/local/bin/docker-entrypoint.sh | sed &quot;28a echo \&apos;FLUSH PRIVILEGES;\&apos; | \&quot;\$\&#123;mysql\[@\]\&#125;\&quot;\necho \&quot;GRANT REPLICATION SLAVE ON *.* TO \&apos;\$MYSQL_REPLICATION_USER\&apos;@\&apos;%\&apos; IDENTIFIED BY \&apos;\$MYSQL_REPLICATION_PASSWORD\&apos;;\&quot; | \&quot;\$\&#123;mysql\[@\]\&#125;\&quot;&quot; | tac)&quot; &gt; /usr/local/bin/docker-entrypoint.sh</div></pre></td></tr></table></figure></p>
<p>执行如下命令本地build mysql-master镜像;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t mysql-master -f ./Dockerfile .</div></pre></td></tr></table></figure></p>
<h3 id="3-2-mysql-slave"><a href="#3-2-mysql-slave" class="headerlink" title="3.2 mysql-slave"></a>3.2 mysql-slave</h3><p>基于官方mysql镜像，修改mysqld.cnf添加server-id和binlog，修改docker-entrypoint.sh添加主机信息并开启从机模式。<br><figure class="highlight plain"><figcaption><span>mysql-slave Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM mysql</div><div class="line"></div><div class="line">RUN RAND=&quot;$(date +%s | rev | cut -c 1-2)$(echo $&#123;RANDOM&#125;)&quot; &amp;&amp; sed -i &apos;/\[mysqld\]/a server-id=&apos;$RAND&apos;\nlog-bin=mysql-bin&apos; /etc/mysql/mysql.conf.d/mysqld.cnf</div><div class="line"></div><div class="line">RUN echo &quot;$(tac /usr/local/bin/docker-entrypoint.sh | sed &quot;28a echo \&quot;START SLAVE;\&quot; | \&quot;\$\&#123;mysql\[@\]\&#125;\&quot;\necho \&quot;CHANGE MASTER TO master_host=\&apos;\$MYSQL_MASTER_SERVICE_HOST\&apos;, master_user=\&apos;\$MYSQL_REPLICATION_USER\&apos;, master_password=\&apos;\$MYSQL_REPLICATION_PASSWORD\&apos;;\&quot; | \&quot;\$\&#123;mysql\[@\]\&#125;\&quot;\necho \&quot;STOP SLAVE;\&quot; | \&quot;\$\&#123;mysql\[@\]\&#125;\&quot;&quot; | tac)&quot; &gt; /usr/local/bin/docker-entrypoint.sh</div></pre></td></tr></table></figure></p>
<p>上面slave的配置中，master_host一项用的是$MYSQL_MASTER_SERVICE_HOST，这个环境变量（enviromnent variable）是由k8s生成的。<br>k8s的service创建后，会自动分配一个cluster ip，这个cluster ip是动态的，我们没法直接使用或硬编码，k8s为了service对容器的可见，生成了一组环境变量，这些环境变量用于记录service name到cluster ip地址的映射关系，这样容器中就可以使用这些变量来使用service。（类似的，Docker中提供了links。）</p>
<p>举例：如果service的名称为foo，则生成的环境变量如下：<br>FOO_SERVICE_HOST<br>FOO_SERVICE_PORT<br>更多介绍请参考k8s官方资料：<a href="http://kubernetes.io/docs/user-guide/container-environment/" target="_blank" rel="external">http://kubernetes.io/docs/user-guide/container-environment/</a></p>
<p>执行如下命令本地build mysql-slave镜像;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t mysql-slave -f ./Dockerfile .</div></pre></td></tr></table></figure></p>
<h3 id="3-3-mycat"><a href="#3-3-mycat" class="headerlink" title="3.3 mycat"></a>3.3 mycat</h3><p>基于gaven/mycat镜像，修改schema.xml进行一主一从读写分离自动切换配置，修改server.xml添加db用户名密码等。<br><figure class="highlight plain"><figcaption><span>mycat Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FROM gaven/mycat</div><div class="line"></div><div class="line">COPY schema.xml /usr/local/mycat/conf/schema.xml</div><div class="line">COPY server.xml /usr/local/mycat/conf/server.xml</div><div class="line">COPY log4j2.xml /usr/local/mycat/conf/log4j2.xml</div><div class="line">COPY entrypoint.sh /root/</div><div class="line">CMD [&quot;/root/entrypoint.sh&quot;]</div></pre></td></tr></table></figure></p>
<p>配置文件参照<a href="https://github.com/jumpjumpbean/k8smysqlcluster" target="_blank" rel="external">github k8smysqlcluster</a>。</p>
<p>执行如下命令本地build mycat镜像;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t jacob/mycat -f ./Dockerfile .</div></pre></td></tr></table></figure></p>
<h3 id="3-4-kubernetes-files"><a href="#3-4-kubernetes-files" class="headerlink" title="3.4 kubernetes files"></a>3.4 kubernetes files</h3><p>rc和svc文件参照<a href="https://github.com/jumpjumpbean/k8smysqlcluster" target="_blank" rel="external">github k8smysqlcluster</a>。</p>
<p>执行如下命令启动，注意顺序为先启动mysql-master，再启动mysql-slave，最后启动mycat;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kubectl create -f ./rc-mysql-master</div><div class="line">kubectl create -f ./svc-mysql-master</div><div class="line">kubectl create -f ./rc-mysql-slave</div><div class="line">kubectl create -f ./svc-mysql-slave</div><div class="line">kubectl create -f ./rc-mycat</div><div class="line">kubectl create -f ./svc-mycat</div></pre></td></tr></table></figure></p>
<hr>
<p>参照资料：<br><a href="http://www.jianshu.com/p/509b65e9a4f5" target="_blank" rel="external">利用Kubernetes搭建mysql主从复制集群</a><br><a href="http://blog.yaodataking.com/2016/01/mycat_mysql_docker_sample1.html" target="_blank" rel="external">基于Mycat的MySQL主从读写分离及自动切换的docker实现</a><br><a href="http://blog.yaodataking.com/2016/03/mycat-haproxy-docker.html" target="_blank" rel="external">基于Docker容器的MyCat高可用方案</a><br><a href="https://www.xncoding.com/2016/09/16/linux/mysql-ha.html" target="_blank" rel="external">centos7配置mysql主从复制</a><br><a href="http://www.mycat.io/" target="_blank" rel="external">Mycat官网</a><br><a href="http://blog.csdn.net/yingxiake/article/details/51697651" target="_blank" rel="external">mycat实现mysql读写分离，热切换，集群</a><br><a href="http://blog.csdn.net/qq_33556185/article/details/52958403" target="_blank" rel="external">使用mycat实现mysql读写分离以及主备自动切换模式</a><br><a href="http://blog.csdn.net/per_son/article/details/52328244" target="_blank" rel="external">mycat读写分离配置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes一键部署一主一从，读写分离，自动切换的mycat+mysql架构，其中mycat配置文件、mysqsl数据文件的volume挂载未涉及，可根据实际情况进行修改。所有代码参照&lt;a href=&quot;https://github.com/jumpjumpbean/k8smysqlcluster&quot;&gt;github k8smysqlcluster&lt;/a&gt;。后期进行双主双从、mycat高可用的扩展。&lt;br&gt;
    
    </summary>
    
      <category term="k8s" scheme="http://www.jumpbeandev.com/categories/k8s/"/>
    
    
      <category term="mysql" scheme="http://www.jumpbeandev.com/tags/mysql/"/>
    
      <category term="mycat" scheme="http://www.jumpbeandev.com/tags/mycat/"/>
    
      <category term="Kubernetes" scheme="http://www.jumpbeandev.com/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://www.jumpbeandev.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hyperledger Hackathon</title>
    <link href="http://www.jumpbeandev.com/2017/03/15/hyperledger/"/>
    <id>http://www.jumpbeandev.com/2017/03/15/hyperledger/</id>
    <published>2017-03-15T09:39:44.000Z</published>
    <updated>2017-03-16T08:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末参加了万达和IBM组织的Hyperledger Hackathon，确实是一场区块链的盛宴，三十四个参赛队，过程紧张而热烈。我们也在24小时内完成产品设计，前后端的开发，联调和部署，PPT的制作，虽未得奖，但收获颇丰。相关代码和文档地址：<a href="https://github.com/jumpjumpbean/HyperledgerHackathon" target="_blank" rel="external">HyperledgerHackathon</a>。<br><img src="/images/2017/03/16/1518.jpg"><br><a id="more"></a></p>
<hr>
<h2 id="1-区块链概述"><a href="#1-区块链概述" class="headerlink" title="1. 区块链概述"></a>1. 区块链概述</h2><p>先说说什么是区块链，区块链属于一种去中心化的记录技术。参与到系统上的节点，可能不属于同一组织、彼此无需信任；区块链数据由所有节点共同维护，每个参与维护节点都能复制获得一份完整记录的拷贝。具有以下特点：</p>
<ul>
<li>维护一条不断增长的链，只可能添加记录，而发生过的记录都不可篡改；</li>
<li>去中心化，或者说多中心化，无需集中的控制而能达成共识，实现上尽量分布式；</li>
<li>通过密码学的机制来确保交易无法抵赖和破坏，并尽量保护用户信息和记录的隐私性。</li>
</ul>
<p>更多区块链相关可参考：<a href="https://yeasy.gitbooks.io/blockchain_guide/intro/what.html" target="_blank" rel="external">区块链技术指南</a>。</p>
<hr>
<h2 id="2-积分链"><a href="#2-积分链" class="headerlink" title="2. 积分链"></a>2. 积分链</h2><p>我们的场景是积分链，基于区块链的垂直电商积分共享平台。</p>
<h3 id="2-1-现状"><a href="#2-1-现状" class="headerlink" title="2.1 现状"></a>2.1 现状</h3><ul>
<li>消费者：消费者拥有积分种类繁多，但积分价值低，很多积分成为”鸡肋“</li>
<li>商户：商户发行的积分流动性差，对消费者吸引力有限，小商户甚至无力发行积分。</li>
<li>现有积分平台：现有积分平台结算复杂，安全性存在隐患，导流效果不明显。</li>
</ul>
<h3 id="2-2-积分链"><a href="#2-2-积分链" class="headerlink" title="2.2 积分链"></a>2.2 积分链</h3><ul>
<li>去中心化：保持各垂直电商独立性</li>
<li>积分共享：消费者可使用任意商户的任意积分</li>
<li>快速结算：结算机制高效可靠</li>
<li>交易透明：交易记录清晰易查</li>
<li>安全信任：数据安全，防止篡改，不可撤销</li>
</ul>
<h3 id="2-3-业务模式"><a href="#2-3-业务模式" class="headerlink" title="2.3 业务模式"></a>2.3 业务模式</h3><h4 id="2-3-1-商户加盟"><a href="#2-3-1-商户加盟" class="headerlink" title="2.3.1 商户加盟"></a>2.3.1 商户加盟</h4><ul>
<li>约定积分价值、积分发行量，缴纳保证金。 </li>
<li>创建独立节点。 </li>
<li>生成智能合约，包含积分价值、积分发行量、发行方等。 </li>
</ul>
<h4 id="2-3-2-积分产生"><a href="#2-3-2-积分产生" class="headerlink" title="2.3.2 积分产生"></a>2.3.2 积分产生</h4><ul>
<li>用户在商户产生积分时，调用平台接口，平台增加该用户在该商户积分。</li>
<li>商户积分总量达到发行量时，通知商户补充保证金，发行新积分。</li>
</ul>
<h4 id="2-3-3-积分使用"><a href="#2-3-3-积分使用" class="headerlink" title="2.3.3 积分使用"></a>2.3.3 积分使用</h4><ul>
<li>用户可选择任意商户积分使用。</li>
<li>使用后平台产生交易记录，包含用户/使用方/发行方/数量/订单号等。</li>
</ul>
<h4 id="2-3-4-结算"><a href="#2-3-4-结算" class="headerlink" title="2.3.4 结算"></a>2.3.4 结算</h4><p>平台根据交易记录与积分价值约定，以周期或实时方式与各商户进行结算。 </p>
<h4 id="2-3-5-交易查询"><a href="#2-3-5-交易查询" class="headerlink" title="2.3.5 交易查询"></a>2.3.5 交易查询</h4><p>商户可查询所有交易记录。 </p>
<h3 id="2-4-Chaincode"><a href="#2-4-Chaincode" class="headerlink" title="2.4 Chaincode"></a>2.4 Chaincode</h3><p>现场使用的是IBM bluemix，我们项目chaincode如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="comment">//WARNING - this chaincode's ID is hard-coded in chaincode_example04 to illustrate one way of</span></div><div class="line"><span class="comment">//calling chaincode from a chaincode. If this example is modified, chaincode_example04.go has</span></div><div class="line"><span class="comment">//to be modified as well with the new ID of chaincode_example02.</span></div><div class="line"><span class="comment">//chaincode_example05 show's how chaincode ID can be passed in as a parameter instead of</span></div><div class="line"><span class="comment">//hard-coding.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">        <span class="string">"errors"</span></div><div class="line">        <span class="string">"fmt"</span></div><div class="line">        <span class="string">"strconv"</span></div><div class="line"></div><div class="line">        <span class="string">"encoding/json"</span></div><div class="line"></div><div class="line">        <span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// SimpleChaincode example simple Chaincode implementation</span></div><div class="line"><span class="keyword">type</span> SimpleChaincode <span class="keyword">struct</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface, function <span class="keyword">string</span>, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> username, shopA, shopB <span class="keyword">string</span>    <span class="comment">// Entities</span></div><div class="line">        <span class="keyword">var</span> err error</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">3</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Incorrect number of arguments. Expecting 3: username, shopA, shopB"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Initialize the chaincode</span></div><div class="line">        username = args[<span class="number">0</span>]</div><div class="line">        shopA = args[<span class="number">1</span>]</div><div class="line">        shopB = args[<span class="number">2</span>]</div><div class="line"></div><div class="line">        fmt.Printf(<span class="string">"username = %s, shopA= %s, shopB = %s\n"</span>, username, shopA, shopB)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> user_A, user_B, user_A_B, user_B_A <span class="keyword">string</span></div><div class="line">        user_A = username + <span class="string">"_"</span> + shopA</div><div class="line">        user_B = username + <span class="string">"_"</span> + shopB</div><div class="line">        user_A_B = username + <span class="string">"_"</span> + shopA + <span class="string">"_"</span> + shopB</div><div class="line">        user_B_A = username + <span class="string">"_"</span> + shopB + <span class="string">"_"</span> + shopA</div><div class="line"></div><div class="line">        <span class="comment">// Write the state to the ledger</span></div><div class="line">        err = stub.PutState(<span class="string">"user"</span>, []<span class="keyword">byte</span>(username))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        shops := []<span class="keyword">string</span>&#123;shopA, shopB&#125;</div><div class="line">        shopsBytes, _ := json.Marshal(shops)</div><div class="line"></div><div class="line">        err = stub.PutState(username, shopsBytes)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        err = stub.PutState(user_A, []<span class="keyword">byte</span>(strconv.Itoa(<span class="number">0</span>)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line">        err = stub.PutState(user_B, []<span class="keyword">byte</span>(strconv.Itoa(<span class="number">0</span>)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line">        err = stub.PutState(user_A_B, []<span class="keyword">byte</span>(strconv.Itoa(<span class="number">0</span>)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        err = stub.PutState(user_B_A, []<span class="keyword">byte</span>(strconv.Itoa(<span class="number">0</span>)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Transaction</span></div><div class="line"><span class="comment">// 1. add user, shop, points:  add, username, shopName, xx points</span></div><div class="line"><span class="comment">// 2. user1 spent shopA's points in shopB by xx points:  consume, username, shopA, shopB, xx points</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface, function <span class="keyword">string</span>, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line"></div><div class="line">        fmt.Println(<span class="string">"Invoke running. Function: "</span> + function)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> function == <span class="string">"add"</span> &#123;</div><div class="line">                <span class="keyword">return</span> t.add(stub, args)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"consume"</span> || function == <span class="string">"spend"</span> &#123;</div><div class="line">                <span class="keyword">return</span> t.spend(stub, args)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Received unknown function invocation: "</span> + function)</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">add</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> username, shopname, user_shop <span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> points, cur_points <span class="keyword">int</span>  <span class="comment">// accumulated points</span></div><div class="line">        <span class="keyword">var</span> err error</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">3</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Incorrect number of arguments. Expecting 3: username, shopname, points"</span>)</div><div class="line">        &#125;</div><div class="line">        username = args[<span class="number">0</span>]</div><div class="line">        shopname = args[<span class="number">1</span>]</div><div class="line">        points, _ = strconv.Atoi(args[<span class="number">2</span>])</div><div class="line"></div><div class="line">        fmt.Println(<span class="string">"add: got param: "</span> + username + <span class="string">","</span> + shopname + <span class="string">","</span> + args[<span class="number">2</span>])</div><div class="line"></div><div class="line">        user_shop = username + <span class="string">"_"</span> + shopname</div><div class="line"></div><div class="line">        pointsBytes, err := stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        cur_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line">        cur_points = cur_points + points</div><div class="line">        fmt.Printf(<span class="string">"After add points:%d, cur_points:%d\n"</span>, points, cur_points)</div><div class="line"></div><div class="line">        <span class="comment">// Write the state back to the ledger</span></div><div class="line">        err = stub.PutState(user_shop, []<span class="keyword">byte</span>(strconv.Itoa(cur_points)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">spend</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> username, spend_shopname, spent_shopname, user_spent_shop, user_spend_spent_shop <span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> points, cur_points <span class="keyword">int</span>  <span class="comment">// accumulated points</span></div><div class="line">        <span class="keyword">var</span> err error</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">4</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Incorrect number of arguments. Expecting 4: username, spend_shop, spent_shop, points"</span>)</div><div class="line">        &#125;</div><div class="line">        username = args[<span class="number">0</span>]</div><div class="line">        spend_shopname = args[<span class="number">1</span>]</div><div class="line">        spent_shopname = args[<span class="number">2</span>]</div><div class="line">        points, err = strconv.Atoi(args[<span class="number">3</span>])</div><div class="line">        fmt.Println(<span class="string">"spend: got param: "</span> + username + <span class="string">","</span> + spend_shopname + <span class="string">","</span> + spent_shopname + <span class="string">", "</span> + args[<span class="number">3</span>])</div><div class="line"></div><div class="line">        <span class="comment">//user_spend_shop = username + "_" + spend_shopname</span></div><div class="line">        user_spent_shop = username + <span class="string">"_"</span> + spent_shopname</div><div class="line">        user_spend_spent_shop = username + <span class="string">"_"</span> + spend_shopname + <span class="string">"_"</span> + spent_shopname</div><div class="line"></div><div class="line">        <span class="comment">// Subtract spent shop's points and record user_spend_spent_shop value. This is the points that is how many points shopA spend shopB</span></div><div class="line">        <span class="keyword">var</span> user_shop <span class="keyword">string</span></div><div class="line">        user_shop = user_spent_shop</div><div class="line">        pointsBytes, err := stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        cur_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line">        cur_points = cur_points - points</div><div class="line">        fmt.Printf(<span class="string">"After spend points, user-shop's ledger:%s, points: %d, cur_points:%d\n"</span>, user_shop, points, cur_points)</div><div class="line"></div><div class="line">        <span class="comment">// Write the state back to the ledger</span></div><div class="line">        err = stub.PutState(user_shop, []<span class="keyword">byte</span>(strconv.Itoa(cur_points)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        user_shop = user_spend_spent_shop</div><div class="line">        pointsBytes, err = stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        cur_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line">        cur_points = cur_points + points</div><div class="line">        fmt.Printf(<span class="string">"After spend points, user-shops' ledger:%s, points:%d, cur_points %s\n"</span>, user_shop, points, cur_points)</div><div class="line"></div><div class="line">        <span class="comment">// Write the state back to the ledger</span></div><div class="line">        err = stub.PutState(user_shop, []<span class="keyword">byte</span>(strconv.Itoa(cur_points)))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Query callback representing the query of a chaincode</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Query</span><span class="params">(stub shim.ChaincodeStubInterface, function <span class="keyword">string</span>, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        fmt.Println(<span class="string">"Query running. Function: "</span> + function)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> function == <span class="string">"query_user"</span> || function == <span class="string">"query"</span> &#123;</div><div class="line">                <span class="keyword">return</span> t.query_user(stub, args)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"query_shop"</span> &#123;</div><div class="line">                <span class="keyword">return</span> t.query_shop(stub, args)</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> []<span class="keyword">byte</span>(<span class="string">"No such function"</span>), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">query_user</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> username, shopA, shopB, user_A, user_B <span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> shops []<span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> shopA_points, shopB_points <span class="keyword">int</span>  <span class="comment">// accumulated points</span></div><div class="line">        <span class="keyword">var</span> err error</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">1</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Incorrect number of arguments. Expecting 1: username"</span>)</div><div class="line">        &#125;</div><div class="line">        username = args[<span class="number">0</span>]</div><div class="line">        fmt.Println(<span class="string">"query_user: got param: "</span> + username )</div><div class="line"></div><div class="line"></div><div class="line">        shopsBytes, err := stub.GetState(username)</div><div class="line">        err = json.Unmarshal(shopsBytes, &amp;shops)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            fmt.Println(<span class="string">"Error unmarshalling user's shops: "</span> + username + <span class="string">"\n---&gt;: "</span> + err.Error())</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Error unmarshalling user's shops "</span> + username)</div><div class="line">        &#125;</div><div class="line">        shopA = shops[<span class="number">0</span>]</div><div class="line">        shopB = shops[<span class="number">1</span>]</div><div class="line"></div><div class="line">        user_A = username + <span class="string">"_"</span> + shopA</div><div class="line">        user_B = username + <span class="string">"_"</span> + shopB</div><div class="line"></div><div class="line">        user_shop := user_A</div><div class="line">        pointsBytes, err := stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        shopA_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line"></div><div class="line">        user_shop = user_B</div><div class="line">        pointsBytes, err = stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        shopB_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line">        resp:= <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</div><div class="line">           shopA: shopA_points,</div><div class="line">           shopB:   shopB_points,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        jsonResp, err := json.Marshal(resp)</div><div class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"resp marshal fail"</span> )</div><div class="line">        &#125;</div><div class="line">        fmt.Printf(<span class="string">"Query Response:%s\n"</span>, jsonResp)</div><div class="line">        <span class="keyword">return</span> []<span class="keyword">byte</span>(jsonResp), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">// Settle shops' points</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">query_shop</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> username, shopA, shopB, user_A, user_B <span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> shops []<span class="keyword">string</span></div><div class="line">        <span class="keyword">var</span> shopA_points, shopB_points <span class="keyword">int</span>  <span class="comment">// accumulated points</span></div><div class="line">        <span class="keyword">var</span> err error</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">1</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Incorrect number of arguments 2. Expecting: shopA, shopB"</span>)</div><div class="line">        &#125;</div><div class="line">        username = <span class="string">"phyllis"</span></div><div class="line">        shopA = args[<span class="number">0</span>]</div><div class="line">        shopB = args[<span class="number">1</span>]</div><div class="line">        fmt.Println(<span class="string">"query_shop: got param: "</span> + shopA + <span class="string">","</span> + shopB)</div><div class="line"></div><div class="line">        <span class="comment">//var user_A_B, user_B_A string</span></div><div class="line">        user_A = username + <span class="string">"_"</span> + shopA</div><div class="line">        user_B = username + <span class="string">"_"</span> + shopB</div><div class="line">        <span class="comment">//user_A_B = username + "_" + shopA + "_" + shopB</span></div><div class="line">        <span class="comment">//user_B_A = username + "_" + shopB + "_" + shopA</span></div><div class="line"></div><div class="line"></div><div class="line">        shopsBytes, err := stub.GetState(username)</div><div class="line">        err = json.Unmarshal(shopsBytes, &amp;shops)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            fmt.Println(<span class="string">"Error unmarshalling user's shops: "</span> + username + <span class="string">"\n---&gt;: "</span> + err.Error())</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Error unmarshalling user's shops "</span> + username)</div><div class="line">        &#125;</div><div class="line">        shopA = shops[<span class="number">0</span>]</div><div class="line">        shopB = shops[<span class="number">1</span>]</div><div class="line"></div><div class="line">        user_A = username + <span class="string">"_"</span> + shopA</div><div class="line">        user_B = username + <span class="string">"_"</span> + shopB</div><div class="line"></div><div class="line">        user_shop := user_A</div><div class="line">        pointsBytes, err := stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        shopA_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line"></div><div class="line">        user_shop = user_B</div><div class="line">        pointsBytes, err = stub.GetState(user_shop)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Failed to get state: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> pointsBytes == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Entity not found: "</span> + user_shop)</div><div class="line">        &#125;</div><div class="line">        shopB_points, _ = strconv.Atoi(<span class="keyword">string</span>(pointsBytes))</div><div class="line"></div><div class="line">        resp:= <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</div><div class="line">           shopA: shopA_points,</div><div class="line">           shopB:   shopB_points,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        jsonResp, err := json.Marshal(resp)</div><div class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"resp marshal fail"</span> )</div><div class="line">        &#125;</div><div class="line">        fmt.Printf(<span class="string">"Query Response:%s\n"</span>, jsonResp)</div><div class="line">        <span class="keyword">return</span> []<span class="keyword">byte</span>(jsonResp), <span class="literal">nil</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        err := shim.Start(<span class="built_in">new</span>(SimpleChaincode))</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                fmt.Printf(<span class="string">"Error starting Simple chaincode: %s"</span>, err)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末参加了万达和IBM组织的Hyperledger Hackathon，确实是一场区块链的盛宴，三十四个参赛队，过程紧张而热烈。我们也在24小时内完成产品设计，前后端的开发，联调和部署，PPT的制作，虽未得奖，但收获颇丰。相关代码和文档地址：&lt;a href=&quot;https://github.com/jumpjumpbean/HyperledgerHackathon&quot;&gt;HyperledgerHackathon&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/images/2017/03/16/1518.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://www.jumpbeandev.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="hyperledger" scheme="http://www.jumpbeandev.com/tags/hyperledger/"/>
    
      <category term="hackathon" scheme="http://www.jumpbeandev.com/tags/hackathon/"/>
    
      <category term="blockchain" scheme="http://www.jumpbeandev.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>Ansible部署Kubernetes集群</title>
    <link href="http://www.jumpbeandev.com/2017/02/03/k8sansible/"/>
    <id>http://www.jumpbeandev.com/2017/02/03/k8sansible/</id>
    <published>2017-02-03T08:19:16.000Z</published>
    <updated>2017-02-03T10:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes官网提供了多种场景的部署方案，例如kubeadm，参照：<a href="https://kubernetes.io/docs/getting-started-guides/" target="_blank" rel="external">Creating a Cluster</a>。但还是觉得ansible的部署最方便，k8s的contrib中提供了ansible部署脚本，使用方法参照：<a href="https://github.com/kubernetes/contrib/tree/master/ansible" target="_blank" rel="external">Kubernetes Ansible</a>。</p>
<hr>
<h2 id="1-服务器构成"><a href="#1-服务器构成" class="headerlink" title="1. 服务器构成"></a>1. 服务器构成</h2><table>
<thead>
<tr>
<th style="text-align:center">No</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">Hostname</th>
<th style="text-align:center">OS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">master</td>
<td style="text-align:center">192.168.34.52</td>
<td style="text-align:center">cts1</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">etcd</td>
<td style="text-align:center">192.168.34.52</td>
<td style="text-align:center">cts1</td>
<td style="text-align:center">Centos7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">minion</td>
<td style="text-align:center">192.168.34.180</td>
<td style="text-align:center">cts2</td>
<td style="text-align:center">Centos7</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<hr>
<h2 id="2-安装ansible"><a href="#2-安装ansible" class="headerlink" title="2. 安装ansible"></a>2. 安装ansible</h2><p>在master上安装ansible：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# yum -y install ansible</div></pre></td></tr></table></figure><br>安装后确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# ansible --version</div><div class="line">ansible 2.2.0.0</div><div class="line">  config file = /etc/ansible/ansible.cfg</div><div class="line">  configured module search path = Default w/o overrides</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="3-设置ssh"><a href="#3-设置ssh" class="headerlink" title="3. 设置ssh"></a>3. 设置ssh</h2><p>该部署方案需要使用ssh免密登录，在所有机器上生成ssh key:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# ssh-keygen</div><div class="line"></div><div class="line">[root@cts2 ~]# ssh-keygen</div></pre></td></tr></table></figure><br>可以通过hostname [newname]修改hostname，设定两台机器的/etc/hosts :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# grep cts /etc/hosts</div><div class="line">192.168.34.52 cts1</div><div class="line">192.168.34.180 cts2</div><div class="line"></div><div class="line">[root@cts2 ~]# grep cts /etc/hosts</div><div class="line">192.168.34.52 cts1</div><div class="line">192.168.34.180 cts2</div></pre></td></tr></table></figure><br>在2台机器上都作如下设定，保证ssh可免密登录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# ssh-copy-id -i cts1</div><div class="line">[root@cts1 ~]# ssh-copy-id -i cts2</div><div class="line"></div><div class="line">[root@cts2 ~]# ssh-copy-id -i cts1</div><div class="line">[root@cts2 ~]# ssh-copy-id -i cts2</div></pre></td></tr></table></figure><br>在ansible所安装的机器上，追加机器信息到/etc/ansible/hosts中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# grep cts /etc/ansible/hosts</div><div class="line">cts1</div><div class="line">cts2</div></pre></td></tr></table></figure><br>确认ansible正常动作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# ansible cts1 -m ping</div><div class="line">cts1 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div><div class="line">[root@cts1 ~]# ansible cts2 -m ping</div><div class="line">cts2 | SUCCESS =&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="4-下载Contrib"><a href="#4-下载Contrib" class="headerlink" title="4. 下载Contrib"></a>4. 下载Contrib</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cts1 ~]# git clone https://github.com/kubernetes/contrib.git</div></pre></td></tr></table></figure>
<hr>
<h2 id="5-创建inventory文件"><a href="#5-创建inventory文件" class="headerlink" title="5. 创建inventory文件"></a>5. 创建inventory文件</h2><p>按照contrib/ansible说明，在inventory目录下创建inventory文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@cts1 inventory]# pwd</div><div class="line">/data/contrib/ansible/inventory</div><div class="line">[root@cts1 inventory]# vim inventory</div><div class="line"></div><div class="line">[masters]</div><div class="line">cts1</div><div class="line"></div><div class="line">[etcd:children]</div><div class="line">masters</div><div class="line"></div><div class="line">[nodes]</div><div class="line">cts2</div></pre></td></tr></table></figure><br>开始误把etcd:children的值也配成cts1了，setup时报出Syntax Error while loading YAML的错误。</p>
<hr>
<h2 id="6-安装所需package"><a href="#6-安装所需package" class="headerlink" title="6. 安装所需package"></a>6. 安装所需package</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cts1 inventory]# yum -y install python-netaddr</div></pre></td></tr></table></figure>
<hr>
<h2 id="7-执行安装文件"><a href="#7-执行安装文件" class="headerlink" title="7. 执行安装文件"></a>7. 执行安装文件</h2><p>执行cd scripts/ &amp;&amp; ./deploy-cluster.sh时总是报出如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TASK [kubernetes : Read back the CA certificate] </div><div class="line">fatal: [cts2 -&gt; cts1]: FAILED! =&gt; &#123;&quot;changed&quot;: false, &quot;failed&quot;: true, &quot;msg&quot;: &quot;file not found: /etc/kubernetes/certs/ca.crt&quot;&#125;</div></pre></td></tr></table></figure><br>于是按照Targeted runs逐个执行：<br><strong>Etcd:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# ./deploy-cluster.sh --tags=etcd</div><div class="line"></div><div class="line">cts1                       : ok=28   changed=2    unreachable=0    failed=0</div><div class="line">cts2                       : ok=6    changed=0    unreachable=0    failed=0</div></pre></td></tr></table></figure><br>确认etcd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# etcd --version</div><div class="line">etcd Version: 3.0.15</div><div class="line">Git SHA: fc00305</div><div class="line">Go Version: go1.6.3</div><div class="line">Go OS/Arch: linux/amd64</div><div class="line">[root@cts1 scripts]# etcdctl --version</div><div class="line">etcdctl version: 3.0.15</div><div class="line">API version: 2</div></pre></td></tr></table></figure><br><strong>Kubernetes master:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# ./deploy-cluster.sh --tags=masters</div><div class="line"></div><div class="line">cts1                       : ok=67   changed=4    unreachable=0    failed=0</div><div class="line">cts2                       : ok=6    changed=0    unreachable=0    failed=0</div></pre></td></tr></table></figure><br><strong>Kubernetes nodes:</strong><br>目前contrib版本中Install fluentd时因fluentd-es.yaml地址已不存在，会出错，解决办法参照：<a href="https://github.com/kubernetes/contrib/pull/2174" target="_blank" rel="external">Support Fluentd migration to DaemonSet</a>，将如下文件进行修改：</p>
<ul>
<li>ansible/roles/kubernetes-addons/files/common/kube-addon-update.sh</li>
<li>ansible/roles/kubernetes-addons/tasks/cluster-logging.yml</li>
<li>ansible/roles/kubernetes-addons/templates/cluster-logging/fluentd-es-ds.yaml.j2</li>
<li>ansible/roles/node/tasks/fluentd-install.yml</li>
<li>ansible/roles/node/tasks/main.yml</li>
</ul>
<p>然后执行安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# ./deploy-cluster.sh --tags=nodes</div><div class="line"></div><div class="line">cts1                       : ok=8    changed=0    unreachable=0    failed=0</div><div class="line">cts2                       : ok=57   changed=3    unreachable=0    failed=0</div></pre></td></tr></table></figure><br><strong>Addons:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# ./deploy-cluster.sh --tags=addons</div><div class="line"></div><div class="line">cts1                       : ok=58   changed=1    unreachable=0    failed=0</div><div class="line">cts2                       : ok=6    changed=0    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="8-确认Kubernetes状况"><a href="#8-确认Kubernetes状况" class="headerlink" title="8. 确认Kubernetes状况"></a>8. 确认Kubernetes状况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cts1 scripts]# kubectl get nodes</div><div class="line">NAME      STATUS    AGE</div><div class="line">cts2      Ready     2h</div><div class="line">[root@cts1 scripts]# kubectl get services</div><div class="line">NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</div><div class="line">kubernetes   10.254.0.1   &lt;none&gt;        443/TCP   2h</div><div class="line">[root@cts1 scripts]# kubectl --version</div><div class="line">Kubernetes v1.4.0</div></pre></td></tr></table></figure>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/liumiaocn/article/details/52068750" target="_blank" rel="external">Kubernetes 1.3 从入门到进阶 安装篇（2）</a><br><a href="https://github.com/kubernetes/contrib/tree/master/ansible" target="_blank" rel="external">Kubernetes Ansible</a><br><a href="https://github.com/kubernetes/contrib/pull/2174" target="_blank" rel="external">Support Fluentd migration to DaemonSet #2174</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes官网提供了多种场景的部署方案，例如kubeadm，参照：&lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/&quot;&gt;Creating a Cluster&lt;/a&gt;。但还是觉得ansible的部署最方便，k8s的contrib中提供了ansible部署脚本，使用方法参照：&lt;a href=&quot;https://github.com/kubernetes/contrib/tree/master/ansible&quot;&gt;Kubernetes Ansible&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-服务器构成&quot;&gt;&lt;a href=&quot;#1-服务器构成&quot; class=&quot;headerlink&quot; title=&quot;1. 服务器构成&quot;&gt;&lt;/a&gt;1. 服务器构成&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;No&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;IP&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Hostname&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;OS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;master&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;192.168.34.52&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cts1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Centos7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;etcd&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;192.168.34.52&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cts1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Centos7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;minion&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;192.168.34.180&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cts2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Centos7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="k8s" scheme="http://www.jumpbeandev.com/categories/k8s/"/>
    
    
      <category term="Kubernetes" scheme="http://www.jumpbeandev.com/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://www.jumpbeandev.com/tags/Docker/"/>
    
      <category term="ansible" scheme="http://www.jumpbeandev.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes + Docker搭建Sonarqube</title>
    <link href="http://www.jumpbeandev.com/2017/01/03/sonarqube/"/>
    <id>http://www.jumpbeandev.com/2017/01/03/sonarqube/</id>
    <published>2017-01-03T09:57:14.000Z</published>
    <updated>2017-01-09T07:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Sonar概述"><a href="#1-Sonar概述" class="headerlink" title="1. Sonar概述"></a>1. Sonar概述</h2><p>Sonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar可以集成不同的测试工具，代码分析工具，以及持续集成工具。<br>与持续集成工具（例如Hudson/Jenkins等）不同，Sonar并不是简单地把不同的代码检查工具结果（例如FindBugs，PMD等）直接显示在Web页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。<br>在对其他工具的支持方面，Sonar不仅提供了对IDE的支持，可以在Eclipse和IntelliJ IDEA这些工具里联机查看结果；同时Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用Sonar。<br>此外，Sonar的插件对Java/PHP/C/C++/Python等编程语言提供支持，对国际化以及报告文档化也有良好的支持。<br>官网：<a href="https://www.sonarqube.org/" target="_blank" rel="external">Sonarqube</a><br><a id="more"></a></p>
<hr>
<h2 id="2-Snoar结构与集成"><a href="#2-Snoar结构与集成" class="headerlink" title="2. Snoar结构与集成"></a>2. Snoar结构与集成</h2><p>结构图：<br><img src="/images/2017/01/03/1809.png"></p>
<p>与其他ALM工具集成：<br><img src="/images/2017/01/03/1810.png"></p>
<hr>
<h2 id="3-Sonar的Kubernetes部署"><a href="#3-Sonar的Kubernetes部署" class="headerlink" title="3. Sonar的Kubernetes部署"></a>3. Sonar的Kubernetes部署</h2><h3 id="3-1-事前准备"><a href="#3-1-事前准备" class="headerlink" title="3.1 事前准备"></a>3.1 事前准备</h3><p>集群构成：<br><img src="/images/2017/01/06/1725.png"><br>建议先将sonarqube镜像pull下来。不准备的话kubernetes创建RC的时候也会自动pull。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull sonarqube</div></pre></td></tr></table></figure></p>
<h3 id="3-2-创建namespace"><a href="#3-2-创建namespace" class="headerlink" title="3.2 创建namespace"></a>3.2 创建namespace</h3><p>定义namespace.yaml：<br><figure class="highlight yaml"><figcaption><span>namespace.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> v1</div><div class="line"><span class="attr">kind:</span> Namespace</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> sonar</div></pre></td></tr></table></figure><br>创建sonar命名空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl create -f namespace.yaml</div></pre></td></tr></table></figure><br><img src="/images/2017/01/06/1849.png"></p>
<h3 id="3-3-启动mysql"><a href="#3-3-启动mysql" class="headerlink" title="3.3 启动mysql"></a>3.3 启动mysql</h3><p>首先要启动db，这里使用mysql。<br>注意：sonarqube6.2镜像要求mysql版本是5.6以上，所以mariadb不可以。另外max_allowed_packet需要设置的大一些，mysql镜像默认是4M。</p>
<figure class="highlight yaml"><figcaption><span>rc-mysql56.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> v1</div><div class="line"><span class="attr">kind:</span> ReplicationController</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> rc-mysql56</div><div class="line"><span class="attr">  namespace:</span> sonar</div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    name:</span> mysql</div><div class="line"><span class="attr">    context:</span> ctpaas_staging_site</div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        name:</span> mysql</div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> mysql</div><div class="line"><span class="attr">        image:</span> docker.io/mysql</div><div class="line"><span class="attr">        args:</span> [<span class="string">"--character-set-server=utf8mb4"</span>, <span class="string">"--collation-server=utf8mb4_unicode_ci"</span>, <span class="string">"--max_allowed_packet=32M"</span>]</div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">          - name:</span> TZ</div><div class="line"><span class="attr">            value:</span> <span class="string">'Asia/Shanghai'</span></div><div class="line"><span class="attr">          - name:</span> LANG</div><div class="line"><span class="attr">            value:</span> <span class="string">'C.UTF-8'</span></div><div class="line"><span class="attr">          - name:</span> MYSQL_ROOT_PASSWORD</div><div class="line"><span class="attr">            value:</span> <span class="string">'password'</span></div><div class="line"><span class="attr">          - name:</span> MYSQL_DATABASE</div><div class="line"><span class="attr">            value:</span> <span class="string">'sonar'</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - mountPath:</span> <span class="string">"/var/lib/mysql"</span></div><div class="line"><span class="attr">          name:</span> mysql-data-dir</div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">        - name:</span> mysql-data-dir</div><div class="line"><span class="attr">          nfs:</span></div><div class="line"><span class="attr">            server:</span> <span class="number">192.168</span><span class="number">.205</span><span class="number">.77</span></div><div class="line"><span class="attr">            path:</span> <span class="string">"/nfs_share/mysql56/mysql_data"</span></div></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>svc-mysql56.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> v1</div><div class="line"><span class="attr">kind:</span> Service</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> svc-mysql56</div><div class="line"><span class="attr">  namespace:</span> sonar</div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">3306</span> <span class="comment"># the port that this service should serve on</span></div><div class="line">    <span class="comment"># the container on each pod to connect to, can be a name</span></div><div class="line">    <span class="comment"># (e.g. 'www') or a number (e.g. 80)</span></div><div class="line"><span class="attr">    targetPort:</span> <span class="number">3306</span></div><div class="line"><span class="attr">    protocol:</span> TCP</div><div class="line"><span class="attr">    nodePort:</span> <span class="number">0</span></div><div class="line">  <span class="comment"># just like the selector in the replication controller,</span></div><div class="line">  <span class="comment"># but this time it identifies the set of pods to load balance</span></div><div class="line">  <span class="comment"># traffic to.</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    name:</span> mysql</div><div class="line"><span class="attr">  type:</span></div><div class="line">     NodePort</div></pre></td></tr></table></figure>
<p>创建mysql rc和service：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl create -f rc-mysql56.yaml</div><div class="line">kubectl create -f svc-mysql56.yaml</div></pre></td></tr></table></figure></p>
<h3 id="3-3-创建Sonar-RC-Service"><a href="#3-3-创建Sonar-RC-Service" class="headerlink" title="3.3 创建Sonar RC/Service"></a>3.3 创建Sonar RC/Service</h3><p>定义rc-sonar.yaml，db使用mysql的cluster ip：<br><figure class="highlight yaml"><figcaption><span>rc-sonar.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> v1</div><div class="line"><span class="attr">kind:</span> ReplicationController</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> rc-sonar</div><div class="line"><span class="attr">  namespace:</span> sonar</div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    name:</span> sonar</div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    name:</span> sonar</div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        name:</span> sonar</div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> sonar</div><div class="line"><span class="attr">        image:</span> docker.io/sonarqube</div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">        - name:</span> SONARQUBE_JDBC_USERNAME</div><div class="line"><span class="attr">          value:</span> user</div><div class="line"><span class="attr">        - name:</span> SONARQUBE_JDBC_PASSWORD</div><div class="line"><span class="attr">          value:</span> password</div><div class="line"><span class="attr">        - name:</span> SONARQUBE_JDBC_URL</div><div class="line"><span class="attr">          value:</span> <span class="string">'jdbc:mysql://10.254.130.11:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8'</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">9000</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - mountPath:</span> <span class="string">"/opt/sonarqube/conf"</span></div><div class="line"><span class="attr">          name:</span> sonar-conf</div><div class="line"><span class="attr">        - mountPath:</span> <span class="string">"/opt/sonarqube/data"</span></div><div class="line"><span class="attr">          name:</span> sonar-data</div><div class="line"><span class="attr">        - mountPath:</span> <span class="string">"/opt/sonarqube/extensions"</span></div><div class="line"><span class="attr">          name:</span> sonar-extensions</div><div class="line"><span class="attr">        - mountPath:</span> <span class="string">"/opt/sonarqube/logs"</span></div><div class="line"><span class="attr">          name:</span> sonar-logs</div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">        - name:</span> sonar-conf</div><div class="line"><span class="attr">          nfs:</span></div><div class="line"><span class="attr">            server:</span> <span class="number">192.168</span><span class="number">.205</span><span class="number">.77</span></div><div class="line"><span class="attr">            path:</span> <span class="string">"/nfs_share/sonar/conf"</span></div><div class="line"><span class="attr">        - name:</span> sonar-data</div><div class="line"><span class="attr">          nfs:</span></div><div class="line"><span class="attr">            server:</span> <span class="number">192.168</span><span class="number">.205</span><span class="number">.77</span></div><div class="line"><span class="attr">            path:</span> <span class="string">"/nfs_share/sonar/data"</span></div><div class="line"><span class="attr">        - name:</span> sonar-extensions</div><div class="line"><span class="attr">          nfs:</span></div><div class="line"><span class="attr">            server:</span> <span class="number">192.168</span><span class="number">.205</span><span class="number">.77</span></div><div class="line"><span class="attr">            path:</span> <span class="string">"/nfs_share/sonar/extensions"</span></div><div class="line"><span class="attr">        - name:</span> sonar-logs</div><div class="line"><span class="attr">          nfs:</span></div><div class="line"><span class="attr">            server:</span> <span class="number">192.168</span><span class="number">.205</span><span class="number">.77</span></div><div class="line"><span class="attr">            path:</span> <span class="string">"/nfs_share/sonar/logs"</span></div></pre></td></tr></table></figure><br>创建volumes，将数据、配置、插件、日志都放在volumes上，这样容器重新创建也不会受影响。</p>
<p>定义svc-sonar.yaml:<br><figure class="highlight yaml"><figcaption><span>svc-sonar.yaml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> v1</div><div class="line"><span class="attr">kind:</span> Service</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> svc-sonar</div><div class="line"><span class="attr">  namespace:</span> sonar</div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  type:</span> NodePort</div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">9000</span></div><div class="line"><span class="attr">    protocol:</span> TCP</div><div class="line"><span class="attr">    nodePort:</span> <span class="number">0</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    name:</span> sonar</div></pre></td></tr></table></figure></p>
<p>创建sonar rc和service：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kubectl create -f rc-sonar.yaml</div><div class="line">kubectl create -f svc-sonar.yaml</div></pre></td></tr></table></figure></p>
<p>确认pod/rc/svc:<br><img src="/images/2017/01/09/1033.png"></p>
<p>获取sonar service的NodePort:<br><img src="/images/2017/01/09/1050.png"></p>
<p>确认是否可以正常打开：<br><img src="/images/2017/01/09/1356.png"></p>
<hr>
<h2 id="4-使用Sonar进行代码分析"><a href="#4-使用Sonar进行代码分析" class="headerlink" title="4. 使用Sonar进行代码分析"></a>4. 使用Sonar进行代码分析</h2><h3 id="4-1-安装Sonarqube-Scanner"><a href="#4-1-安装Sonarqube-Scanner" class="headerlink" title="4.1 安装Sonarqube Scanner"></a>4.1 安装Sonarqube Scanner</h3><p>参照<a href="http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">Analyzing with SonarQube Scanner</a>:</p>
<ul>
<li>下载Scanner并解压</li>
<li>修改install_directory/conf/sonar-scanner.properties中的sonar.host.url为搭建的sonar服务器地址，端口为NodePort</li>
<li>将install_directory/bin加入path中</li>
<li>运行sonar-scanner -h</li>
</ul>
<h3 id="4-2-创建sonar-project-properties"><a href="#4-2-创建sonar-project-properties" class="headerlink" title="4.2 创建sonar-project.properties"></a>4.2 创建sonar-project.properties</h3><p>在项目根目录下添加sonar-project.properties配置文件，模板如下：<br><figure class="highlight plain"><figcaption><span>sonar-project.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#required metadata</div><div class="line">#projectKey项目的唯一标识，不能重复。</div><div class="line">sonar.projectKey=pj_key</div><div class="line">#projectName值不能是中文，否则web页面部分是乱码</div><div class="line">sonar.projectName=pj_name</div><div class="line">sonar.projectVersion=1.0</div><div class="line">sonar.sourceEncoding=UTF-8</div><div class="line">sonar.modules=java-module,javascript-module,html-module</div><div class="line"># Java module</div><div class="line">java-module.sonar.projectName=pj_name_java</div><div class="line">java-module.sonar.language=java</div><div class="line"># .表示projectBaseDir指定的目录</div><div class="line">java-module.sonar.sources=JavaSource</div><div class="line">java-module.sonar.projectBaseDir=.</div><div class="line">#sonar.binaries=classes</div><div class="line"># JavaScript module</div><div class="line">javascript-module.sonar.projectName=pj_name_js</div><div class="line">javascript-module.sonar.language=js</div><div class="line">javascript-module.sonar.sources=WebContent</div><div class="line">javascript-module.sonar.projectBaseDir=.</div><div class="line"># Html module</div><div class="line">html-module.sonar.projectName=pj_name_html</div><div class="line">html-module.sonar.language=web</div><div class="line">html-module.sonar.sources=WebContent</div><div class="line">html-module.sonar.projectBaseDir=.</div></pre></td></tr></table></figure></p>
<h3 id="4-3-分析并确认结果"><a href="#4-3-分析并确认结果" class="headerlink" title="4.3 分析并确认结果"></a>4.3 分析并确认结果</h3><p>在代码根目录运行sonar-scanner，结束后到sonar上确认结果：<br><img src="/images/2017/01/09/1443.png"></p>
<hr>
<h2 id="5-Jenkins集成Sonarqube"><a href="#5-Jenkins集成Sonarqube" class="headerlink" title="5. Jenkins集成Sonarqube"></a>5. Jenkins集成Sonarqube</h2><p>参照<a href="http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analyzing with SonarQube Scanner for Jenkins</a>，在Jenkins上安装Sonarqube插件后进行配置。具体后面再开一篇说明。</p>
<hr>
<h2 id="6-Sonar常用插件"><a href="#6-Sonar常用插件" class="headerlink" title="6. Sonar常用插件"></a>6. Sonar常用插件</h2><p>目前安装的插件如下：<br><img src="/images/2017/01/09/1444.png"><br><img src="/images/2017/01/09/1454.png"><br><img src="/images/2017/01/09/1455.png"></p>
<hr>
<p>参照资料：<br><a href="http://blog.csdn.net/liumiaocn/article/details/52437132" target="_blank" rel="external">Kubernetes单Pod启动sonarqube</a><br><a href="http://container-solutions.com/pet-cattle-running-sonar-kubernetes/" target="_blank" rel="external">From Pet to Cattle – Running Sonar on Kubernetes</a><br><a href="https://github.com/SonarSource/sonar-examples/blob/master/projects/multi-module/sonar-runner/java-sonar-runner-modules-different-structures/sonar-project.properties" target="_blank" rel="external">sonar-examples</a><br><a href="http://docs.sonarqube.org/display/SONAR/Documentation" target="_blank" rel="external">SonarQube Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Sonar概述&quot;&gt;&lt;a href=&quot;#1-Sonar概述&quot; class=&quot;headerlink&quot; title=&quot;1. Sonar概述&quot;&gt;&lt;/a&gt;1. Sonar概述&lt;/h2&gt;&lt;p&gt;Sonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar可以集成不同的测试工具，代码分析工具，以及持续集成工具。&lt;br&gt;与持续集成工具（例如Hudson/Jenkins等）不同，Sonar并不是简单地把不同的代码检查工具结果（例如FindBugs，PMD等）直接显示在Web页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。&lt;br&gt;在对其他工具的支持方面，Sonar不仅提供了对IDE的支持，可以在Eclipse和IntelliJ IDEA这些工具里联机查看结果；同时Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用Sonar。&lt;br&gt;此外，Sonar的插件对Java/PHP/C/C++/Python等编程语言提供支持，对国际化以及报告文档化也有良好的支持。&lt;br&gt;官网：&lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;Sonarqube&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CI" scheme="http://www.jumpbeandev.com/categories/CI/"/>
    
    
      <category term="Kubernetes" scheme="http://www.jumpbeandev.com/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://www.jumpbeandev.com/tags/Docker/"/>
    
      <category term="CI" scheme="http://www.jumpbeandev.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Java编译和运行</title>
    <link href="http://www.jumpbeandev.com/2016/09/07/javabuildandrun/"/>
    <id>http://www.jumpbeandev.com/2016/09/07/javabuildandrun/</id>
    <published>2016-09-07T02:26:00.000Z</published>
    <updated>2016-09-08T07:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下Java编译和运行的大致过程。先上一张Java平台逻辑结构图：<br><img src="/images/2016/09/07/javaplatform.gif"><br><a id="more"></a></p>
<hr>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><img src="/images/2016/09/07/1054.jpg"><br>如图， 从上至下分别是编译型语言，解释型语言，Java的执行模型。Java程序从源文件创建到程序运行要经过两大步骤：1、源文件由编译器编译成字节码（ByteCode） 2、字节码由java虚拟机解释运行。关于Javay属于编译型语言还是解释性语言，可以参照<a href="http://www.zhihu.com/question/19608553" target="_blank" rel="external">Java 是编译型语言还是解释型语言</a>。<br><img src="/images/2016/09/07/1110.png"></p>
<hr>
<h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h2><p>Java代码编译是由Java源码编译器来完成，流程图如下所示：<br><img src="/images/2016/09/07/1425.png"></p>
<h3 id="2-1-编译机制"><a href="#2-1-编译机制" class="headerlink" title="2.1 编译机制"></a>2.1 编译机制</h3><p>Java 源码编译由以下三个过程组成：</p>
<ul>
<li>分析和输入到符号表</li>
<li>注解处理</li>
<li>语义分析和生成class文件</li>
</ul>
<p>最后生成的class文件由以下部分组成：</p>
<ul>
<li>结构信息。包括class文件格式版本号及各部分的数量与大小的信息</li>
<li>元数据。对应于Java源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池</li>
<li>方法信息。对应Java源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息</li>
</ul>
<h3 id="2-2-字节码"><a href="#2-2-字节码" class="headerlink" title="2.2 字节码"></a>2.2 字节码</h3><p>Class文件是8位字节流，按字节对齐。之所以称为字节码，是因为每条指令都只占据一个字节，所有的操作码和操作数都是按字节对齐的。<br>Java虚拟机规范中规定，Class文件格式采用一种类似C语言结构体的伪结构来存储，它只有两种数据类型</p>
<ul>
<li>无符号数（基本数据类型）<br>主要用于描述数字、索引引用、数量值、或UTF-8编码构成的字符串；<br>u1 – 1个字节<br>u2 – 2个字节<br>u4 – 4个字节<br>u8 – 8个字节</li>
<li>表（符合数据类型）<br>用于描述有层次关系的符合结构的数据；习惯性以“_info”结尾</li>
</ul>
<p>更详细介绍可以参照;<br><a href="http://blog.csdn.net/chen8238065/article/details/50983260" target="_blank" rel="external">Java字节码小结</a><br><a href="http://ifeve.com/javacodetobytecode-partone/" target="_blank" rel="external">Java代码到字节码</a><br><a href="http://blog.csdn.net/silentbalanceyh/article/details/42640739" target="_blank" rel="external">Java字节码.class文件案例分析</a></p>
<hr>
<h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h2><p>Java字节码的执行是由JVM执行引擎来完成，流程图如下所示：<br><img src="/images/2016/09/07/1706.gif"></p>
<h3 id="3-1-什么是JVM"><a href="#3-1-什么是JVM" class="headerlink" title="3.1 什么是JVM"></a>3.1 什么是JVM</h3><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。JVM屏蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。<br>JVM规范参照：<a href="https://jcp.org/en/jsr/detail?id=924" target="_blank" rel="external">Java Virtual Machine Specification</a><br>中文版：<a href="http://files.cnblogs.com/files/zhuYears/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A7%84%E8%8C%83%EF%BC%88JavaSE7%EF%BC%89.pdf" target="_blank" rel="external">Java虚拟机规范（JavaSE7）</a></p>
<h3 id="3-2-JRE-JDK-JVM的关系"><a href="#3-2-JRE-JDK-JVM的关系" class="headerlink" title="3.2 JRE/JDK/JVM的关系"></a>3.2 JRE/JDK/JVM的关系</h3><ul>
<li>JRE(JavaRuntimeEnvironment，Java运行环境)，也就是Java平台。所有的Java程序都要在JRE下才能运行。普通用户只需要运行已开发好的java程序，安装JRE即可。</li>
<li>JDK(Java Development Kit)是程序开发者用来来编译、调试java程序用的开发工具包。JDK的工具也是Java程序，也需要JRE才能运行。为了保持JDK的独立性和完整性，在JDK的安装过程中，JRE也是 安装的一部分。所以，在JDK的安装目录下有一个名为jre的目录，用于存放JRE文件。</li>
<li>JVM(JavaVirtualMachine，Java虚拟机)是JRE的一部分。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java语言最重要的特点就是跨平台运行。使用JVM就是为了支持与操作系统无关，实现跨平台。</li>
</ul>
<h3 id="3-3-JVM架构"><a href="#3-3-JVM架构" class="headerlink" title="3.3 JVM架构"></a>3.3 JVM架构</h3><h4 id="3-3-1-JVM体系结构"><a href="#3-3-1-JVM体系结构" class="headerlink" title="3.3.1 JVM体系结构"></a>3.3.1 JVM体系结构</h4><p>JVM = 类加载器 classloader + 执行引擎 execution engine + 运行时数据区域 runtime data area</p>
<ul>
<li>类装载器（ClassLoader）（用来装载.class文件）</li>
<li>执行引擎（执行字节码，或者执行本地方法）</li>
<li>运行时数据区（方法区、堆、java栈、PC寄存器、本地方法栈）<br>JVM体系结构：<br><img src="/images/2016/09/07/1102.png"></li>
</ul>
<h4 id="3-3-2-classloader"><a href="#3-3-2-classloader" class="headerlink" title="3.3.2 classloader"></a>3.3.2 classloader</h4><p>classloader作用是装载.class文件。<br>classloader 有两种装载class的方式（时机）：</p>
<ol>
<li>隐式：运行过程中，碰到new方式生成对象时，隐式调用classLoader到JVM</li>
<li>显式：通过class.forname()动态加载<br>类的层次关系和加载顺序可以由下图来描述：<br><img src="/images/2016/09/07/1123.png"></li>
</ol>
<p>1）Bootstrap ClassLoader<br>负责加载 $JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类<br>2）Extension ClassLoader<br>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包<br>3）App ClassLoader<br>负责记载classpath中指定的jar包及目录中class<br>4）Custom ClassLoader<br>属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader<br>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</p>
<h4 id="3-3-3-执行引擎"><a href="#3-3-3-执行引擎" class="headerlink" title="3.3.3 执行引擎"></a>3.3.3 执行引擎</h4><p>执行字节码，或者执行本地方法。类被加载到虚拟机内存中开始，到卸载出内存为主，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个阶段称为连接（Linking）。</p>
<h4 id="3-3-4-运行时数据区"><a href="#3-3-4-运行时数据区" class="headerlink" title="3.3.4 运行时数据区"></a>3.3.4 运行时数据区</h4><p>JVM运行时数据区：<br><img src="/images/2016/09/07/1022.png"></p>
<ol>
<li><p><strong>PC程序计数器</strong>：一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器, NAMELY存储每个线程下一步将执行的JVM指令，如该方法为native的，则PC寄存器中不存储任何信息。Java 的多线程机制离不开程序计数器，每个线程都有一个自己的PC，以便完成不同线程上下文环境的切换。</p>
</li>
<li><p><strong>java虚拟机栈</strong>：与PC 一样，java虚拟机栈也是线程私有的。每一个JVM线程都有自己的java虚拟机栈，这个栈与线程同时创建，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double）、部分的返回结果以及Stack Frame，非基本类型的对象在JVM栈上仅存放一个指向堆上的地址。。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
</li>
<li><p><strong>堆（Heap）</strong>:它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配，Heap中的对象的内存需要等待GC进行回收。<br><img src="/images/2016/09/07/1450.png"><br>1）堆是JVM中所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也导致了new对象的开销是比较大的<br>2）Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间TLAB（Thread Local Allocation Buffer），其大小由JVM根据运行的情况计算而得，在TLAB上分配对象时不需要加锁，因此JVM在给线程的对象分配内存时会尽量的在TLAB上分配，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配<br>3）TLAB仅作用于新生代的Eden Space，因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效。<br>4）所有新创建的Object 都将会存储在新生代Yong Generation中。如果Young Generation的数据在一次或多次GC后存活下来，那么将被转移到OldGeneration。新的Object总是创建在Eden Space。</p>
</li>
<li><p><strong>方法区域（Method Area）</strong><br>1）在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。<br>2）方法区域存放了所加载的类的信息（名称、修饰符等）、类中的静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p>
</li>
<li><p><strong>运行时常量池（Runtime Constant Pool）</strong><br>存放的为类中的固定的常量信息、方法和Field的引用信息等，其空间从方法区域中分配。</p>
</li>
<li><p><strong>本地方法堆栈（Native Method Stacks）</strong><br>JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法调用的状态。</p>
</li>
</ol>
<h3 id="3-4-JVM垃圾回收"><a href="#3-4-JVM垃圾回收" class="headerlink" title="3.4 JVM垃圾回收"></a>3.4 JVM垃圾回收</h3><p>这里对垃圾回收作简单介绍，后面再详细展开。<br>GC (Garbage Collection)的基本原理：将内存中不再被使用的对象进行回收，GC中用于回收的方法称为收集器，由于GC需要消耗一些资源和时间，Java在对对象的生命周期特征进行分析后，按照新生代、旧生代的方式来对对象进行收集，以尽可能的缩短GC对应用造成的暂停。<br>1）对新生代的对象的收集称为minor GC；<br>2）对旧生代的对象的收集称为Full GC；<br>3）程序中主动调用System.gc()强制执行的GC为Full GC。</p>
<p>不同的对象引用类型， GC会采用不同的方法进行回收，JVM对象的引用分为了四种类型：<br>1）强引用：默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）<br>2）软引用：软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）<br>3）弱引用：在GC时一定会被GC回收<br>4）虚引用：由于虚引用只是用来得知对象是否被GC</p>
<hr>
<h2 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MainApp.java  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Animal animal = <span class="keyword">new</span> Animal(<span class="string">"Puppy"</span>);  </div><div class="line">        animal.printName();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//Animal.java  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </div><div class="line">    <span class="keyword">public</span> String name;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"Animal ["</span>+name+<span class="string">"]"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125; </div></pre></td></tr></table></figure>
<p>第一步(编译): 创建完源文件之后，程序会先被编译为.class文件。Java编译一个类时，如果这个类所依赖的类还没有被编译，编译器就会先编译这个被依赖的类，然后引用，否则直接引用，这个有点象make。如果java编译器在指定目录下找不到该类所其依赖的类的.class文件或者.java源文件的话，编译器话报“cant find symbol”的错误。</p>
<p>编译后的字节码文件格式主要分为两部分：常量池和方法字节码。常量池记录的是代码出现过的所有token(类名，成员变量名等等)以及符号引用（方法引用，成员变量引用等等）；方法字节码放的是类中各个方法的字节码。下面是MainApp.class通过反汇编的结果，我们可以清楚看到.class文件的结构：<br>MainApp类常量池:<br><img src="/images/2016/09/07/1520.png"><br>MainApp类方法字节码:<br><img src="/images/2016/09/07/1521.png"></p>
<p>第二步（运行）：java类运行的过程大概可分为两个过程：1、类的加载 2、类的执行。需要说明的是：JVM主要在程序第一次主动使用类的时候，才会去加载该类。也就是说，JVM并不是在一开始就把一个程序就所有的类都加载到内存中，而是到不得不用的时候才把它加载进来，而且只加载一次。<br>下面是程序运行的详细步骤： </p>
<ol>
<li>在编译好java程序得到MainApp.class文件后，在命令行上敲java AppMain。系统就会启动一个jvm进程，jvm进程从classpath路径中找到一个名为AppMain.class的二进制文件，将MainApp的类信息加载到运行时数据区的方法区内，这个过程叫做MainApp类的加载。 </li>
<li>然后JVM找到AppMain的主函数入口，开始执行main函数。 </li>
<li>main函数的第一条命令是Animal animal = new Animal(“Puppy”);就是让JVM创建一个Animal对象，但是这时候方法区中没有Animal类的信息，所以JVM马上加载Animal类，把Animal类的类型信息放到方法区中。 </li>
<li>加载完Animal类之后，Java虚拟机做的第一件事情就是在堆区中为一个新的Animal实例分配内存, 然后调用构造函数初始化Animal实例，这个Animal实例持有着指向方法区的Animal类的类型信息（其中包含有方法表，java动态绑定的底层实现）的引用。 </li>
<li>当使用animal.printName()的时候，JVM根据animal引用找到Animal对象，然后根据Animal对象持有的引用定位到方法区中Animal类的类型信息的方法表，获得printName()函数的字节码的地址。 </li>
<li>开始运行printName()函数。</li>
</ol>
<p><img src="/images/2016/09/07/1522.png"></p>
<hr>
<p>参照资料：<br><a href="https://segmentfault.com/a/1190000002579346" target="_blank" rel="external">JVM的工作原理，层次结构以及GC工作原理</a><br><a href="http://www.cnblogs.com/sunada2005/p/3577799.html" target="_blank" rel="external">JVM介绍</a><br><a href="http://blog.csdn.net/mccand1234/article/details/52013918" target="_blank" rel="external">Java代码编译和执行过程</a><br><a href="http://blog.csdn.net/cutesource/article/details/5904542" target="_blank" rel="external">JVM学习笔记（二）——Java代码编译和执行的整个过程</a><br><a href="http://blog.jamesdbloom.com/JVMInternals.html" target="_blank" rel="external">JVM Internals</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下Java编译和运行的大致过程。先上一张Java平台逻辑结构图：&lt;br&gt;&lt;img src=&quot;/images/2016/09/07/javaplatform.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.jumpbeandev.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.jumpbeandev.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.jumpbeandev.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>windows下搭建python开发环境</title>
    <link href="http://www.jumpbeandev.com/2016/02/23/winpyconfig/"/>
    <id>http://www.jumpbeandev.com/2016/02/23/winpyconfig/</id>
    <published>2016-02-23T02:02:01.000Z</published>
    <updated>2016-09-02T03:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>到<a href="https://www.python.org/downloads/" target="_blank" rel="external">官网</a>下载安装包后安装，以2.7为例，安装完成后在环境变量Path中添加C:\Python27;C:\Python27\Scripts。在cmd中输入python -V,输出版本信息则安装成功。</p>
<h2 id="创建virtualenv虚拟环境"><a href="#创建virtualenv虚拟环境" class="headerlink" title="创建virtualenv虚拟环境"></a>创建virtualenv虚拟环境</h2><h3 id="2-1-安装virtualenv"><a href="#2-1-安装virtualenv" class="headerlink" title="2.1 安装virtualenv"></a>2.1 安装virtualenv</h3><p>python 2.7中包含了pip，可以在cmd下输入pip -V验证。<br>执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure><br><a id="more"></a><br>如需代理，windows下可执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip --proxy proxy:port install virtualenv</div></pre></td></tr></table></figure><br>linux下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> https_proxy=proxy:port</div><div class="line">sudo -E pip insatll virtualenv</div></pre></td></tr></table></figure><br>安装完后输入virtualenv –version验证。</p>
<p>可以安装<a href="http://virtualenvwrapper.readthedocs.org/en/latest/index.html" target="_blank" rel="external">virtualenvwrapper</a>进行更方便的操作，windows下是<a href="https://pypi.python.org/pypi/virtualenvwrapper-win" target="_blank" rel="external">virtualenvwrapper-win</a>。<br>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>
<ol>
<li>将所有虚拟环境整合在一个目录下</li>
<li>管理（新增，删除，复制）虚拟环境</li>
<li>切换虚拟环境</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Work</span>\<span class="title">WorkProject</span>\<span class="title">Python</span>&gt;<span class="title">pip</span> --<span class="title">proxy</span> <span class="title">proxy:port</span> <span class="title">install</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span></span></div><div class="line"><span class="title">You</span> <span class="title">are</span> <span class="title">using</span> <span class="title">pip</span> <span class="title">version</span> 7.0.1, <span class="title">however</span> <span class="title">version</span> 7.1.2 <span class="title">is</span> <span class="title">available</span>.</div><div class="line"><span class="title">You</span> <span class="title">should</span> <span class="title">consider</span> <span class="title">upgrading</span> <span class="title">via</span> <span class="title">the</span> '<span class="title">pip</span> <span class="title">install</span> --<span class="title">upgrade</span> <span class="title">pip</span>' <span class="title">command</span>.</div><div class="line"><span class="title">Collecting</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span></div><div class="line">  <span class="title">Downloading</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span>-1.2.1.<span class="title">zip</span></div><div class="line"><span class="title">Requirement</span> <span class="title">already</span> <span class="title">satisfied</span> (<span class="title">use</span> --<span class="title">upgrade</span> <span class="title">to</span> <span class="title">upgrade</span>): <span class="title">virtualenv</span> <span class="title">in</span> <span class="title">c</span>:\<span class="title">python27</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span> (<span class="title">from</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span>)</div><div class="line"><span class="title">Installing</span> <span class="title">collected</span> <span class="title">packages</span>: <span class="title">virtualenvwrapper</span>-<span class="title">win</span></div><div class="line">  <span class="title">Running</span> <span class="title">setup.py</span> <span class="title">install</span> <span class="title">for</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span></div><div class="line"><span class="title">Successfully</span> <span class="title">installed</span> <span class="title">virtualenvwrapper</span>-<span class="title">win</span>-1.2.1</div></pre></td></tr></table></figure>
<h3 id="2-2-创建虚拟环境"><a href="#2-2-创建虚拟环境" class="headerlink" title="2.2 创建虚拟环境"></a>2.2 创建虚拟环境</h3><p>创建一个目录用来保存虚拟环境，进入该目录并在cmd下执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Work</span>\<span class="title">WorkProject</span>\<span class="title">Python</span>&gt;<span class="title">mkvirtualenv</span> <span class="title">dayaenv</span></span></div><div class="line"><span class="title">New</span> <span class="title">python</span> <span class="title">executable</span> <span class="title">in</span> <span class="title">dayaenv</span>\<span class="title">Scripts</span>\<span class="title">python.exe</span></div><div class="line"><span class="title">Installing</span> <span class="title">setuptools</span>, <span class="title">pip</span>, <span class="title">wheel</span>...<span class="title">done</span>.</div><div class="line"></div><div class="line">(<span class="title">dayaenv</span>) <span class="title">C</span>:\<span class="title">Work</span>\<span class="title">WorkProject</span>\<span class="title">Python</span>&gt;<span class="title">lsvirtualenv</span></div><div class="line"></div><div class="line"><span class="title">dir</span> /<span class="title">b</span> /<span class="title">ad</span> "<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">jacob</span>\<span class="title">Envs</span>"</div><div class="line">======================================================</div><div class="line"><span class="title">dayaenv</span></div></pre></td></tr></table></figure><br>退出虚拟环境：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(dayaenv) C:\Work\WorkProject\Python&gt;deactivate</div><div class="line"><span class="function"></span></div><div class="line">C:\<span class="title">Work</span>\<span class="title">WorkProject</span>\<span class="title">Python</span>&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装python&quot;&gt;&lt;a href=&quot;#安装python&quot; class=&quot;headerlink&quot; title=&quot;安装python&quot;&gt;&lt;/a&gt;安装python&lt;/h2&gt;&lt;p&gt;到&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;官网&lt;/a&gt;下载安装包后安装，以2.7为例，安装完成后在环境变量Path中添加C:\Python27;C:\Python27\Scripts。在cmd中输入python -V,输出版本信息则安装成功。&lt;/p&gt;
&lt;h2 id=&quot;创建virtualenv虚拟环境&quot;&gt;&lt;a href=&quot;#创建virtualenv虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;创建virtualenv虚拟环境&quot;&gt;&lt;/a&gt;创建virtualenv虚拟环境&lt;/h2&gt;&lt;h3 id=&quot;2-1-安装virtualenv&quot;&gt;&lt;a href=&quot;#2-1-安装virtualenv&quot; class=&quot;headerlink&quot; title=&quot;2.1 安装virtualenv&quot;&gt;&lt;/a&gt;2.1 安装virtualenv&lt;/h3&gt;&lt;p&gt;python 2.7中包含了pip，可以在cmd下输入pip -V验证。&lt;br&gt;执行：&lt;br&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install virtualenv&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.jumpbeandev.com/categories/python/"/>
    
    
      <category term="python" scheme="http://www.jumpbeandev.com/tags/python/"/>
    
      <category term="virtualenv" scheme="http://www.jumpbeandev.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>微信支付开发配置</title>
    <link href="http://www.jumpbeandev.com/2016/01/06/wechatconfig/"/>
    <id>http://www.jumpbeandev.com/2016/01/06/wechatconfig/</id>
    <published>2016-01-06T01:07:05.000Z</published>
    <updated>2016-09-02T03:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信开发涉及到支付业务，配置相对繁琐一些，并且公众平台和商户平台要分别设置，如果第一次配可能会踩到很多坑，大体记录下主要的配置。</p>
<hr>
<h2 id="公众平台"><a href="#公众平台" class="headerlink" title="公众平台"></a>公众平台</h2><h3 id="开发基本配置"><a href="#开发基本配置" class="headerlink" title="开发基本配置"></a>开发基本配置</h3><p>在开发-基本配置中，启用服务器配置，设置所开发系统后台的服务器地址、Token、EncodingAESKey、消息加解密方式。<br><img src="/images/2016/01/06/1-4-2016 00-08-21.jpg"><br><a id="more"></a></p>
<hr>
<h3 id="JS接口安全域名"><a href="#JS接口安全域名" class="headerlink" title="JS接口安全域名"></a>JS接口安全域名</h3><p>在公众号设置-功能设置中，将所开发系统的域名添加到JS接口安全域名中，格式为域名全称，如www.abc.com，否则调用微信接口失败。<br><img src="/images/2016/01/06/1-4-2016 00-05-40.jpg"><br><img src="/images/2016/01/06/1-4-2016 00-06-22.jpg"></p>
<hr>
<h3 id="网页授权获取用户基本信息"><a href="#网页授权获取用户基本信息" class="headerlink" title="网页授权获取用户基本信息"></a>网页授权获取用户基本信息</h3><p>在接口权限-网页授权获取用户基本信息中设置系统域名，否则授权不通过，会报redirect_uri参数错误。<br><img src="/images/2016/01/06/1-4-2016 00-07-09.jpg"><br><img src="/images/2016/01/06/1-4-2016 00-07-38.jpg"></p>
<hr>
<h3 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h3><p>在微信支付-开发配置中，设置支付授权目录，该目录内容为发起支付所在目录，如WxpayAPI.<br><img src="/images/2016/01/06/1-4-2016 00-04-11.png"></p>
<hr>
<h2 id="商户平台"><a href="#商户平台" class="headerlink" title="商户平台"></a>商户平台</h2><p>公众平台配置结束后，进入商户平台进一步配置，目前商户平台只支持IE。</p>
<h3 id="安装操作证书"><a href="#安装操作证书" class="headerlink" title="安装操作证书"></a>安装操作证书</h3><p>在操作证书中安装操作证书。<br><img src="/images/2016/01/06/1-4-2016 00-14-06.jpg"></p>
<hr>
<h3 id="API证书-amp-密钥"><a href="#API证书-amp-密钥" class="headerlink" title="API证书&amp;密钥"></a>API证书&amp;密钥</h3><p>在API安全-API证书中下载证书：<br><img src="/images/2016/01/06/1-4-2016 00-15-01.jpg"><br>在API安全-API密钥中设置密钥：<br><img src="/images/2016/01/06/1-4-2016 00-15-24.jpg"></p>
<hr>
<h2 id="微信参数"><a href="#微信参数" class="headerlink" title="微信参数"></a>微信参数</h2><p>调用微信接口需要的基本参数：</p>
<ul>
<li>AppID</li>
<li>AppSecret</li>
<li>API密钥</li>
<li>微信支付商户号</li>
<li>API证书</li>
</ul>
<p>到此微信侧基本配置完成，剩下的就是祈祷了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信开发涉及到支付业务，配置相对繁琐一些，并且公众平台和商户平台要分别设置，如果第一次配可能会踩到很多坑，大体记录下主要的配置。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;公众平台&quot;&gt;&lt;a href=&quot;#公众平台&quot; class=&quot;headerlink&quot; title=&quot;公众平台&quot;&gt;&lt;/a&gt;公众平台&lt;/h2&gt;&lt;h3 id=&quot;开发基本配置&quot;&gt;&lt;a href=&quot;#开发基本配置&quot; class=&quot;headerlink&quot; title=&quot;开发基本配置&quot;&gt;&lt;/a&gt;开发基本配置&lt;/h3&gt;&lt;p&gt;在开发-基本配置中，启用服务器配置，设置所开发系统后台的服务器地址、Token、EncodingAESKey、消息加解密方式。&lt;br&gt;&lt;img src=&quot;/images/2016/01/06/1-4-2016 00-08-21.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="微信开发" scheme="http://www.jumpbeandev.com/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信开发" scheme="http://www.jumpbeandev.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题</title>
    <link href="http://www.jumpbeandev.com/2015/12/12/nexttheme/"/>
    <id>http://www.jumpbeandev.com/2015/12/12/nexttheme/</id>
    <published>2015-12-12T05:26:23.000Z</published>
    <updated>2016-09-02T03:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>每次心血澎湃的换用新环境新工具后，总会迷失在选主题的漩涡中，不能摆脱，无法自拔。尝试了几款主题，本想用炫酷的yelee，一番挣扎后，还是决定使用next主题，感谢<a href="http://notes.iissnan.com/" target="_blank" rel="external">IIssNan</a>。</p>
<hr>
<h2 id="Next主题下载"><a href="#Next主题下载" class="headerlink" title="Next主题下载"></a>Next主题下载</h2><p>这里使用的是Next的双栏皮肤Pisces，因还未正式发布，所以在<a href="https://github.com/iissnan/hexo-theme-next/tree/pisces" target="_blank" rel="external">Branch Pisces</a>中下载，解压后放到\Hexo\themes目录下，然后hexo的_config.yml中改为theme: next-pisces，重新生成即可。<br><a id="more"></a></p>
<hr>
<h2 id="Next配置"><a href="#Next配置" class="headerlink" title="Next配置"></a>Next配置</h2><p>配置基本都是参照主题的官方文档来的：<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>支持的比较全面，写的也很详细。<br>阅读次数需要注册LeanCloud，配置方法参照<a href="http://notes.xiamo.tk/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="external">这里</a>。<br>SEO优化参照<a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="external">arao的方法</a>。</p>
<hr>
<p>一通配置后，基本就是现在的模样了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次心血澎湃的换用新环境新工具后，总会迷失在选主题的漩涡中，不能摆脱，无法自拔。尝试了几款主题，本想用炫酷的yelee，一番挣扎后，还是决定使用next主题，感谢&lt;a href=&quot;http://notes.iissnan.com/&quot;&gt;IIssNan&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Next主题下载&quot;&gt;&lt;a href=&quot;#Next主题下载&quot; class=&quot;headerlink&quot; title=&quot;Next主题下载&quot;&gt;&lt;/a&gt;Next主题下载&lt;/h2&gt;&lt;p&gt;这里使用的是Next的双栏皮肤Pisces，因还未正式发布，所以在&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/tree/pisces&quot;&gt;Branch Pisces&lt;/a&gt;中下载，解压后放到\Hexo\themes目录下，然后hexo的_config.yml中改为theme: next-pisces，重新生成即可。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.jumpbeandev.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://www.jumpbeandev.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Groovy文件处理</title>
    <link href="http://www.jumpbeandev.com/2015/09/22/Groovy%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://www.jumpbeandev.com/2015/09/22/Groovy文件处理/</id>
    <published>2015-09-22T05:36:11.000Z</published>
    <updated>2016-09-02T03:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Groovy与其他动态语言一样，具有强大的文件/文本处理能力。</p>
<h2 id="1-遍历某文件夹内文件并进行文本查找与替换："><a href="#1-遍历某文件夹内文件并进行文本查找与替换：" class="headerlink" title="1. 遍历某文件夹内文件并进行文本查找与替换："></a>1. 遍历某文件夹内文件并进行文本查找与替换：</h2><h3 id="1-1-遍历文件夹内所有文件并查找与替换："><a href="#1-1-遍历文件夹内所有文件并查找与替换：" class="headerlink" title="1.1 遍历文件夹内所有文件并查找与替换："></a>1.1 遍历文件夹内所有文件并查找与替换：</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> <span class="keyword">static</span> replaceDirFileText(String src, String dest, File dir)&#123;</div><div class="line">    <span class="keyword">def</span> fileText</div><div class="line">    dir.eachFileRecurse(</div><div class="line">        &#123;file -&gt;</div><div class="line">            <span class="keyword">if</span>(file.isFile())&#123;</div><div class="line">                fileText = file.text;</div><div class="line">                fileText = fileText.replaceAll(src, dest)</div><div class="line">                file.write(fileText, “utf<span class="number">-8</span>”);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-2-遍历指定类型文件并查找与替换："><a href="#1-2-遍历指定类型文件并查找与替换：" class="headerlink" title="1.2 遍历指定类型文件并查找与替换："></a>1.2 遍历指定类型文件并查找与替换：</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> <span class="keyword">static</span> replaceDirFileText(String src, String dest, File dir)&#123;</div><div class="line">    <span class="keyword">def</span> fileText</div><div class="line">    <span class="comment">//Replace the text in special file types</span></div><div class="line">    <span class="comment">//def backupFile</span></div><div class="line">    <span class="keyword">def</span> exts = [<span class="string">".java"</span>, <span class="string">".xml"</span>]</div><div class="line">    dir.eachFileRecurse(</div><div class="line">        &#123;file -&gt;</div><div class="line">            <span class="keyword">for</span> (ext <span class="keyword">in</span> exts)&#123;</div><div class="line">                <span class="keyword">if</span> (file.name.endsWith(ext)) &#123;</div><div class="line">                    fileText = file.text;</div><div class="line">                    <span class="comment">//backupFile = new File(file.path + ".bak");</span></div><div class="line">                    <span class="comment">//backupFile.write(fileText);</span></div><div class="line">                    fileText = fileText.replaceAll(src, dest)</div><div class="line">                    file.write(fileText, <span class="string">"utf-8"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-文件-文件夹复制。JAVA实现比较繁琐，Groovy简洁明了："><a href="#2-文件-文件夹复制。JAVA实现比较繁琐，Groovy简洁明了：" class="headerlink" title="2. 文件/文件夹复制。JAVA实现比较繁琐，Groovy简洁明了："></a>2. 文件/文件夹复制。JAVA实现比较繁琐，Groovy简洁明了：</h2><h3 id="2-1-Java实现："><a href="#2-1-Java实现：" class="headerlink" title="2.1 Java实现："></a>2.1 Java实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File sourceFile, File targetFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        BufferedInputStream inBuff = <span class="keyword">null</span>;</div><div class="line">        BufferedOutputStream outBuff = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 新建文件输入流并对它进行缓冲</span></div><div class="line">            inBuff = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(sourceFile));</div><div class="line">            <span class="comment">// 新建文件输出流并对它进行缓冲</span></div><div class="line">            outBuff = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(targetFile));</div><div class="line">            <span class="comment">// 缓冲数组</span></div><div class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">5</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">while</span> ((len = inBuff.read(b)) != -<span class="number">1</span>) &#123;</div><div class="line">                outBuff.write(b, <span class="number">0</span>, len);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 刷新此缓冲的输出流</span></div><div class="line">            outBuff.flush();</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            println e</div><div class="line">            e.printStackTrace()</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 关闭流</span></div><div class="line">            <span class="keyword">if</span> (inBuff != <span class="keyword">null</span>)</div><div class="line">                inBuff.close();</div><div class="line">            <span class="keyword">if</span> (outBuff != <span class="keyword">null</span>)</div><div class="line">                outBuff.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyDirectiory</span><span class="params">(String sourceDir, String targetDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 新建目标目录</span></div><div class="line">            (<span class="keyword">new</span> File(targetDir)).mkdirs();</div><div class="line">            <span class="comment">// 获取源文件夹当前下的文件或目录</span></div><div class="line">            File[] file = (<span class="keyword">new</span> File(sourceDir)).listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; file.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (file[i].isFile()) &#123;</div><div class="line">                    <span class="comment">// 源文件</span></div><div class="line">                    File sourceFile=file[i];</div><div class="line">                    <span class="comment">// 目标文件</span></div><div class="line">                    File targetFile=<span class="keyword">new</span> File(<span class="keyword">new</span> File(targetDir).getAbsolutePath() + File.separator+file[i].getName());</div><div class="line">                    copyFile(sourceFile,targetFile);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (file[i].isDirectory()) &#123;</div><div class="line">                    <span class="comment">// 准备复制的源文件夹</span></div><div class="line">                    String dir1=sourceDir + <span class="string">"/"</span> + file[i].getName();</div><div class="line">                    <span class="comment">// 准备复制的目标文件夹</span></div><div class="line">                    String dir2=targetDir + <span class="string">"/"</span>+ file[i].getName();</div><div class="line">                    copyDirectiory(dir1, dir2);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            println e</div><div class="line">            e.printStackTrace()</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-Groovy-AntBuilder实现："><a href="#2-2-Groovy-AntBuilder实现：" class="headerlink" title="2.2 Groovy AntBuilder实现："></a>2.2 Groovy AntBuilder实现：</h3><h4 id="2-2-1-Copy-directory-to-another-directory"><a href="#2-2-1-Copy-directory-to-another-directory" class="headerlink" title="2.2.1 Copy directory to another directory:"></a>2.2.1 Copy directory to another directory:</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String sourceDir = SOURCE_DIR_PATH</div><div class="line">String destinationDir = DESTINATION_DIR_PATH</div><div class="line"><span class="keyword">new</span> AntBuilder().copy(<span class="string">todir:</span> destinationDir) &#123;</div><div class="line">    fileset(<span class="string">dir:</span> sourceDir)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-Copy-directory-with-excluding-some-files"><a href="#2-2-2-Copy-directory-with-excluding-some-files" class="headerlink" title="2.2.2 Copy directory with excluding some files :"></a>2.2.2 Copy directory with excluding some files :</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">String sourceDir = SOURCE_DIR_PATH</div><div class="line">String destinationDir = DESTINATION_DIR_PATH</div><div class="line"></div><div class="line"><span class="keyword">new</span> AntBuilder().copy(<span class="string">todir:</span> destinationDir) &#123;</div><div class="line">    fileset(<span class="string">dir :</span> sourceDir) &#123;</div><div class="line">        exclude(<span class="string">name:</span><span class="string">"*.java"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> AntBuilder().copy(<span class="string">todir:</span> <span class="string">"E:/2"</span>) &#123;</div><div class="line">    fileset(<span class="string">dir :</span> <span class="string">"E:/1"</span>) &#123;</div><div class="line">        include(<span class="string">name:</span><span class="string">"**/*.java"</span>)</div><div class="line">        exclude(<span class="string">name:</span><span class="string">"**/*Test.java"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-3-Copy-files-from-one-directory-to-another"><a href="#2-2-3-Copy-files-from-one-directory-to-another" class="headerlink" title="2.2.3 Copy files from one directory to another :"></a>2.2.3 Copy files from one directory to another :</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sourceFilePath = SOURCE_FILE_PATH</div><div class="line">String destinationFilePath = DESTINATION_FILE_PATH</div><div class="line">(<span class="keyword">new</span> AntBuilder()).copy(<span class="string">file:</span> sourceFilePath, <span class="string">tofile:</span> destinationFilePath)</div></pre></td></tr></table></figure>
<p>参考:<br><a href="http://www.codercorp.com/blog/groovy/groovy-file-magic-with-antbuilder.html" target="_blank" rel="external">http://www.codercorp.com/blog/groovy/groovy-file-magic-with-antbuilder.html</a><br><a href="http://www.grails.info/2012/09/21/copy-filesfolders-from-one-location-to-another-in-groovy/" target="_blank" rel="external">http://www.grails.info/2012/09/21/copy-filesfolders-from-one-location-to-another-in-groovy/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Groovy与其他动态语言一样，具有强大的文件/文本处理能力。&lt;/p&gt;
&lt;h2 id=&quot;1-遍历某文件夹内文件并进行文本查找与替换：&quot;&gt;&lt;a href=&quot;#1-遍历某文件夹内文件并进行文本查找与替换：&quot; class=&quot;headerlink&quot; title=&quot;1. 遍历某文件夹内文件并进行文本查找与替换：&quot;&gt;&lt;/a&gt;1. 遍历某文件夹内文件并进行文本查找与替换：&lt;/h2&gt;&lt;h3 id=&quot;1-1-遍历文件夹内所有文件并查找与替换：&quot;&gt;&lt;a href=&quot;#1-1-遍历文件夹内所有文件并查找与替换：&quot; class=&quot;headerlink&quot; title=&quot;1.1 遍历文件夹内所有文件并查找与替换：&quot;&gt;&lt;/a&gt;1.1 遍历文件夹内所有文件并查找与替换：&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; replaceDirFileText(String src, String dest, File dir)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; fileText&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dir.eachFileRecurse(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;file -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file.isFile())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fileText = file.text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fileText = fileText.replaceAll(src, dest)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                file.write(fileText, “utf&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;”);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Groovy" scheme="http://www.jumpbeandev.com/categories/Groovy/"/>
    
    
      <category term="Groovy" scheme="http://www.jumpbeandev.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo在Github搭建博客</title>
    <link href="http://www.jumpbeandev.com/2015/09/01/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.jumpbeandev.com/2015/09/01/使用Hexo在Github搭建博客/</id>
    <published>2015-09-01T04:52:48.000Z</published>
    <updated>2016-09-02T03:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>倒腾了一天终于把blog搭起来了，第一篇就记录下搭建方法吧。</p>
<hr>
<h2 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h2><p>域名是在<a href="https://www.godaddy.com/" target="_blank" rel="external">Godaddy</a>上买的，原因是国外且支持支付宝，比较方便。</p>
<ul>
<li>注册个账号，注意个人信息中国家要选China，否则没有支付宝选项。</li>
<li>查到域名加入购物车，选完后会有一堆收费服务，不用管，直接Continue to Cart。</li>
<li>确认域名、购买时间等，然后一路点下去，支付方式选择支付宝，支付后购买成功。</li>
</ul>
<p>这里说明一下，币种默认USD就可以，支付宝会自动根据汇率转换。<br>另外比较坑的就是优惠码，网上随便一搜一堆，我挑了几个说是支持支付宝的，可在跳转支付界面时就提示错误了，换了几个都这样，不知道是使用的人数已经超额还是压根就不支持，anyway，删掉优惠码后就成功支付了。优惠码添加和删除在这里：<br><img src="/images/9-2-2015 09-42-08.png"><br><a id="more"></a></p>
<hr>
<h2 id="2-GitHub注册账号，创建username-github-io"><a href="#2-GitHub注册账号，创建username-github-io" class="headerlink" title="2. GitHub注册账号，创建username.github.io"></a>2. GitHub注册账号，创建username.github.io</h2><p>GitHub提供了Pages服务，可以用来搭建静态博客。官方介绍很详细，可以参照：<a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="external">GitHub Pages</a></p>
<ul>
<li>注册账号</li>
<li>选择”+New repository”</li>
<li>Repository name一定要填<strong>username.github.io(其中username替换为你github注册的实际用户名)</strong><br><img src="/images/9-2-2015 10-25-35.png"></li>
<li>参照<a href="https://help.github.com/articles/creating-pages-with-the-automatic-generator/" target="_blank" rel="external">The Automatic Page Generator</a>自动生成Page。</li>
</ul>
<p>这时候从浏览器访问username.github.io就可以看到自动生成的page了。</p>
<hr>
<h2 id="3-安装git，nodejs，hexo"><a href="#3-安装git，nodejs，hexo" class="headerlink" title="3. 安装git，nodejs，hexo"></a>3. 安装git，nodejs，hexo</h2><p>看到很多人说hexo操作简单，速度也比较快，就打算试试。<br>hexo是node.js写的，首先安装git和node.js，我的系统是Windows:</p>
<ul>
<li><a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<h3 id="3-1-Node-js"><a href="#3-1-Node-js" class="headerlink" title="3.1 Node.js"></a>3.1 Node.js</h3><h4 id="3-1-1-安装"><a href="#3-1-1-安装" class="headerlink" title="3.1.1 安装"></a>3.1.1 安装</h4><p>安装基本一路Next就好了，过程中会自动在环境变量的path里添加nodejs，例如“C:\Program Files\nodejs”。但需要手动添加NODE_PATH环境变量，value为node_modules，例如“C:\Program Files\nodejs\node_modules”。</p>
<h4 id="3-1-2-验证"><a href="#3-1-2-验证" class="headerlink" title="3.1.2 验证"></a>3.1.2 验证</h4><p>打开cmd，输入：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<h4 id="3-1-3-npm配置"><a href="#3-1-3-npm配置" class="headerlink" title="3.1.3 npm配置"></a>3.1.3 npm配置</h4><p>配置npm的全局模块的存放路径以及cache的路径，在NodeJs下建立”node_global”及”node_cache”两个文件夹。打开cmd，输入：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> prefix "C:\Program Files\nodejs\node_global"</div><div class="line">npm config <span class="built_in">set</span> cache "C:\Program Files\nodejs\node_cache"</div></pre></td></tr></table></figure>
<h3 id="3-2-Git"><a href="#3-2-Git" class="headerlink" title="3.2 Git"></a>3.2 Git</h3><p>安装过程就不说了，Git教程可参照<a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git中文教程</a>。<br>以下部分主要参考beiyuu的<a href="http://beiyuu.com/github-pages/" target="_blank" rel="external">《使用Github Pages建独立博客》</a>。</p>
<h4 id="3-2-1-检查SSH-keys的设置"><a href="#3-2-1-检查SSH-keys的设置" class="headerlink" title="3.2.1 检查SSH keys的设置"></a>3.2.1 检查SSH keys的设置</h4><p>首先我们需要检查你电脑上现有的ssh key：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
<p>如果显示“No such file or directory”，跳到第三步，否则继续。</p>
<h4 id="3-2-2-备份和移除原来的ssh-key设置"><a href="#3-2-2-备份和移除原来的ssh-key设置" class="headerlink" title="3.2.2 备份和移除原来的ssh key设置"></a>3.2.2 备份和移除原来的ssh key设置</h4><p>因为已经存在key文件，所以需要备份旧的数据并删除：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">config  id\_rsa  id\_rsa.pub  known_hosts</div><div class="line">$ mkdir key_backup</div><div class="line">$ cp id\_rsa* key\_backup</div><div class="line">$ rm id_rsa*</div></pre></td></tr></table></figure>
<h4 id="3-2-3-生成新的SSH-Key"><a href="#3-2-3-生成新的SSH-Key" class="headerlink" title="3.2.3 生成新的SSH Key"></a>3.2.3 生成新的SSH Key</h4><p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your\_user\_directory/.ssh/id_rsa):&lt;回车就好&gt;</div></pre></td></tr></table></figure>
<p>然后系统会要你输入加密串（<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" target="_blank" rel="external">Passphrase</a>）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>
<p>最后看到这样的界面，就成功设置ssh key了：<br><img src="http://beiyuu.com/images/githubpages/ssh-key-set.png" alt=""></p>
<h4 id="3-2-4-添加SSH-Key到GitHub"><a href="#3-2-4-添加SSH-Key到GitHub" class="headerlink" title="3.2.4 添加SSH Key到GitHub"></a>3.2.4 添加SSH Key到GitHub</h4><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。<br>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。<br>在Github主页上Settings –&gt; SSH keys –&gt; Add SSH key，把复制的内容粘贴进去，然后点击Add Key按钮即可</p>
<p>PS：如果需要配置多个GitHub账号，可以参看这个<a href="http://blog.csdn.net/itmyhome1990/article/details/42643233?utm_source=tuicool" target="_blank" rel="external">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令git config –global –unset user.email删除用户账户设置，在每一个repo下面使用git config –local user.email ‘你的github邮箱@mail.com’ 命令单独设置用户账户信息</p>
<h4 id="3-2-5-测试"><a href="#3-2-5-测试" class="headerlink" title="3.2.5 测试"></a>3.2.5 测试</h4><p>可以输入下面的命令，看看设置是否成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果是下面的反应：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>不要紧张，输入yes就好，然后会看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi &lt;em&gt;username&lt;/em&gt;! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure>
<h3 id="3-3-Hexo"><a href="#3-3-Hexo" class="headerlink" title="3.3 Hexo"></a>3.3 Hexo</h3><p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo文档</a>。<br>利用npm命令可安装：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo [--proxy http://url:port]</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="4-创建hexo博客目录，新建文章并部署到github"><a href="#4-创建hexo博客目录，新建文章并部署到github" class="headerlink" title="4. 创建hexo博客目录，新建文章并部署到github"></a>4. 创建hexo博客目录，新建文章并部署到github</h2><p>我当前Hexo的版本为3.1.1。</p>
<h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h3><p>创建hexo目录，右键选择Git bash，执行以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="4-2-创建文章"><a href="#4-2-创建文章" class="headerlink" title="4.2 创建文章"></a>4.2 创建文章</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new "my new post"</div></pre></td></tr></table></figure>
<p>会生成my new post.md文件，可以进行编辑。</p>
<h3 id="4-3-生成"><a href="#4-3-生成" class="headerlink" title="4.3 生成"></a>4.3 生成</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<h3 id="4-4-部署"><a href="#4-4-部署" class="headerlink" title="4.4 部署"></a>4.4 部署</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h3 id="4-5-配置"><a href="#4-5-配置" class="headerlink" title="4.5 配置"></a>4.5 配置</h3><p>_config.yml是其配置文件，记一下踩的坑吧：</p>
<ul>
<li>某项修改时，冒号后面格式为：一个半角空格+value，例如title: MyBlog，空格多或少都会报错</li>
<li>Hexo 3的deploy配置：<br>deploy:<br>type: git<br>repository: git@github.com:username/username.github.io.git<br>branch: master</li>
</ul>
<p>另外Hexo没有删除命令，如果要删除某文章，直接到source中把文件删掉即可。</p>
<hr>
<h2 id="5-绑定域名，设置DNS"><a href="#5-绑定域名，设置DNS" class="headerlink" title="5. 绑定域名，设置DNS"></a>5. 绑定域名，设置DNS</h2><h3 id="5-1-DNSPod"><a href="#5-1-DNSPod" class="headerlink" title="5.1 DNSPod"></a>5.1 DNSPod</h3><p>使用<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a>，注册后添加两条A记录和一条CNAME记录，其中A的两条记录指向的ip地址是github Pages的提供的ip，可在<a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/" target="_blank" rel="external">Github Pages</a>查看。CNAME记录中记录值为username.github.io。<br><img src="/images/9-6-2015 10-28-17.png"></p>
<h3 id="5-2-Godday"><a href="#5-2-Godday" class="headerlink" title="5.2 Godday"></a>5.2 Godday</h3><p>登录后找到域名 –&gt; Manage –&gt; Nameservers，更改godaddy的Nameservers为DNSpod的NameServers f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。<br><img src="/images/9-6-2015 10-43-03.png"></p>
<h3 id="5-3-Github"><a href="#5-3-Github" class="headerlink" title="5.3 Github"></a>5.3 Github</h3><p>在hexo的source目录下创建CNAME文件，内容为要绑定的域名，然后hexo deploy提交到github上去。</p>
<p>配置完后等待域名解析生效即可。</p>
<p>参考：<br><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">hexo系列教程：（二）搭建hexo博客</a><br><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">Hexo搭建Github静态博客</a><br><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br><a href="http://zhaofei.tk/2014/11/30/jekyll_to_hexo/" target="_blank" rel="external">更换博客系统——从jekyll到hexo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;倒腾了一天终于把blog搭起来了，第一篇就记录下搭建方法吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-购买域名&quot;&gt;&lt;a href=&quot;#1-购买域名&quot; class=&quot;headerlink&quot; title=&quot;1. 购买域名&quot;&gt;&lt;/a&gt;1. 购买域名&lt;/h2&gt;&lt;p&gt;域名是在&lt;a href=&quot;https://www.godaddy.com/&quot;&gt;Godaddy&lt;/a&gt;上买的，原因是国外且支持支付宝，比较方便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册个账号，注意个人信息中国家要选China，否则没有支付宝选项。&lt;/li&gt;
&lt;li&gt;查到域名加入购物车，选完后会有一堆收费服务，不用管，直接Continue to Cart。&lt;/li&gt;
&lt;li&gt;确认域名、购买时间等，然后一路点下去，支付方式选择支付宝，支付后购买成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下，币种默认USD就可以，支付宝会自动根据汇率转换。&lt;br&gt;另外比较坑的就是优惠码，网上随便一搜一堆，我挑了几个说是支持支付宝的，可在跳转支付界面时就提示错误了，换了几个都这样，不知道是使用的人数已经超额还是压根就不支持，anyway，删掉优惠码后就成功支付了。优惠码添加和删除在这里：&lt;br&gt;&lt;img src=&quot;/images/9-2-2015 09-42-08.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.jumpbeandev.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://www.jumpbeandev.com/tags/hexo/"/>
    
      <category term="github" scheme="http://www.jumpbeandev.com/tags/github/"/>
    
      <category term="blog" scheme="http://www.jumpbeandev.com/tags/blog/"/>
    
  </entry>
  
</feed>
